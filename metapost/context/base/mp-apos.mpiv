%D \module
%D   [       file=mp-apos.mp,
%D        version=2012.02.19, % was mp-core: 1999.08.01, anchoring
%D          title=\CONTEXT\ \METAPOST\ graphics,
%D       subtitle=anchored background macros,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA / Hans Hagen \& Ton Otten}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

if known context_apos : endinput ; fi ;

boolean context_apos ; context_apos := true ;

path    posboxes[],
        posregions[] ;

numeric multipages[],
        nofposboxes ;

nofposboxes := 0 ;

def boxlineoptions = withcolor .8blue  enddef ;
def boxfilloptions = withcolor .8white enddef ;

def connect_positions =
    if nofposboxes = 2 :
        pickup pencircle scaled boxlinewidth ;
        path pa ; pa := posboxes[1] enlarged boxlineoffset ;
        path pb ; pb := posboxes[2] enlarged boxlineoffset ;
        if pospages[1] = pospages[2] :
            draw posboxes[1]  boxlineoptions ;
            path pc ; pc := center pa {up} .. {down} center pb ;
            pair cc ; cc := (pc intersection_point pa) ;
            if intersection_found :
                pc := pc cutbefore cc ;
                cc := (pc intersection_point pb) ;
                if intersection_found :
                    pc := pc cutafter cc ;
                    drawarrow pc boxlineoptions ;
                    drawarrow reverse pc boxlineoptions ;
                fi ;
            fi ;
        elseif pospages[1] == RealPageNumber :
            draw posboxes[1] boxlineoptions ;
            path pc ; pc := center pa {up} ... {right} urcorner (posregions[1] enlarged (20pt,20pt)) ;
            pair cc ; cc := (pc intersection_point pa) ;
            if intersection_found :
                pc := pc cutbefore cc ;
                drawarrow pc boxlineoptions ;
            fi ;
        elseif pospages[2] == RealPageNumber :
            draw posboxes[2] boxlineoptions ;
            path pc ; pc := ulcorner (posregions[2] enlarged (20pt,20pt)) {right} ... {down} center pb ;
            pair cc ; cc := (pc intersection_point pb) ;
            if intersection_found :
                pc := pc cutafter cc ;
                drawarrow pc boxlineoptions ;
            fi ;
        fi ;
    fi ;
enddef ;

% anch-bar:

% def anch_sidebars_draw(expr p_b_self, p_e_self, y_b_self, y_e_self, h_b_self, d_e_self, distance, linewidth, linecolor) =
%     StartPage ;
%         path p ; p :=
%         if p_b_self=p_e_self :
%             (xpart ulcorner Field[Text][Text],y_b_self+h_b_self) --
%             (xpart llcorner Field[Text][Text],y_e_self-d_e_self) ;
%         elseif RealPageNumber=p_b_self :
%             (xpart ulcorner Field[Text][Text],y_b_self+h_b_self) --
%             (llcorner Field[Text][Text]) ;
%         elseif RealPageNumber=p_e_self :
%             (ulcorner Field[Text][Text]) --
%             (xpart llcorner Field[Text][Text],y_e_self-d_e_self) ;
%         else :
%             (ulcorner Field[Text][Text]) --
%             (llcorner Field[Text][Text]) ;
%         fi ;
%         p := p shifted (-llcorner Field[Text][Text]-(distance,0)) ;
%         interim linecap := butt ;
%         draw p
%             withpen pencircle scaled linewidth
%             withcolor linecolor ;
%     StopPage ;
% enddef ;

def anch_sidebars_draw (expr p_b_self, p_e_self, y_b_self, y_e_self, h_b_self, d_e_self,
        x, y, w, h, alternative, distance, linewidth, linecolor) =
    begingroup ;
    if alternative = 1 :
        % nothing
    else :
        interim linecap := butt ;
    fi ;
    draw
        if p_b_self=p_e_self :
            (-distance,y_b_self+h_b_self-y) -- (-distance,y_e_self-d_e_self-y)
        elseif RealPageNumber=p_b_self :
            (-distance,y_b_self+h_b_self-y) -- (-distance,0) ;
        elseif RealPageNumber=p_e_self :
            (-distance,h) -- (-distance,y_e_self-d_e_self-y)
        else :
            (-distance,h) -- (-distance,0)
        fi
        if alternative = 1 :
            dashed (withdots scaled (linewidth/2))
        else :
            withpen pencircle scaled linewidth
        fi
        withcolor linecolor ;
    endgroup ;
enddef ;
