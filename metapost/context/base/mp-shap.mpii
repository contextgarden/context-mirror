%D \module
%D   [       file=mp-shap.mpii,
%D        version=2000.05.31,
%D          title=\CONTEXT\ \METAPOST\ graphics,
%D       subtitle=shapes,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA / Hans Hagen \& Ton Otten}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See licen-en.pdf for
%C details.

if known context_shap : endinput ; fi ;

boolean context_shap ; context_shap := true ;

path predefined_shapes[] ;

begingroup ;

save xradius, yradius, xxradius, yyradius ;
save ll, lr, ur, ul, llx, lly, lrx, lry, urx, ury, ulx, uly, llxx, llyy, lrxx, lryy, urxx, uryy, ulxx, ulyy, lc, rc, tc, bc ;

numeric xradius, yradius, xxradius, yyradius ;
pair ll, lr, ur, ul, llx, lly, lrx, lry, urx, ury, ulx, uly, llxx, llyy, lrxx, lryy, urxx, uryy, ulxx, ulyy, lc, rc, tc, bc ;

xradius  := .15 ;
yradius  := .15 ;
xxradius := .10 ;
yyradius := .10 ;

ll       := llcorner (unitsquare shifted (-.5,-.5)) ;
lr       := lrcorner (unitsquare shifted (-.5,-.5)) ;
ur       := urcorner (unitsquare shifted (-.5,-.5)) ;
ul       := ulcorner (unitsquare shifted (-.5,-.5)) ;

llx      := ll shifted (xradius,0)  ;
lly      := ll shifted (0,yradius)  ;

lrx      := lr shifted (-xradius,0) ;
lry      := lr shifted (0,yradius)  ;

urx      := ur shifted (-xradius,0) ;
ury      := ur shifted (0,-yradius) ;

ulx      := ul shifted (xradius,0)  ;
uly      := ul shifted (0,-yradius) ;

llxx     := ll shifted (xxradius,0)  ;
llyy     := ll shifted (0,yyradius)  ;

lrxx     := lr shifted (-xxradius,0) ;
lryy     := lr shifted (0,yyradius)  ;

urxx     := ur shifted (-xxradius,0) ;
uryy     := ur shifted (0,-yyradius) ;

ulxx     := ul shifted (xxradius,0)  ;
ulyy     := ul shifted (0,-yyradius) ;

lc       := ll shifted (0,.5) ;
rc       := lr shifted (0,.5) ;
tc       := ul shifted (.5,0) ;
bc       := ll shifted (.5,0) ;

predefined_shapes[ 0] := (origin--cycle) ;
predefined_shapes[ 5] := (llx--lrx{right}...rc...{left}urx--ulx{left}...lc...{right}cycle) ;
predefined_shapes[ 6] := (ll--lrx{right}...rc...{left}urx--ul--cycle) ;
predefined_shapes[ 7] := (ll--lrx{right}...rc...{left}urx--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[ 8] := (lr--ury{up}...tc...{down}uly--ll--cycle) ;
predefined_shapes[ 9] := (lr--ury{up}...tc...{down}uly--ll--cycle) rotatedaround(origin,180) ;
predefined_shapes[10] := (ll--lr--ur--ul--ll--ur--ul--ll--cycle) ;
predefined_shapes[11] := (ll--lr--ur--ul--ll--lr--ul--ll--cycle) ;
predefined_shapes[12] := (ll--lrx--ur--ulx--cycle) ;
predefined_shapes[13] := (llx--lr--urx--ul--cycle) ;
predefined_shapes[14] := (lly--bc--lry--ury--tc--uly--cycle) ;
predefined_shapes[15] := (llx--lrx--rc--urx--ulx--lc--cycle) ;
predefined_shapes[16] := (ll--lrx--rc--urx--ul--cycle) ;
predefined_shapes[17] := (ll--lrx--rc--urx--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[18] := (lr--ury--tc--uly--ll--cycle) ;
predefined_shapes[19] := (lr--ury--tc--uly--ll--cycle) rotatedaround(origin,180) ;
predefined_shapes[20] := (ll--lr--ur--ul--ll--llxx--ulxx--ul--ll--lr--ur--urxx--lrxx--cycle) ;
predefined_shapes[21] := (ul--ll--lr--ur--ul--ulyy--uryy--ur--ul--ll--lr--lryy--llyy--cycle) ;
predefined_shapes[22] := (ll--lrx--lry--ur--ulx--uly--cycle) ;
predefined_shapes[23] := (llx--lr--ury--urx--ul--lly--cycle) ;
predefined_shapes[24] := (ll--lr--ur--ul--cycle) ;
predefined_shapes[25] := (llx--lrx--lry--ury--urx--ulx--uly--lly--cycle) ;
predefined_shapes[26] := (ll--lrx--lry--ur--ul--cycle) ;
predefined_shapes[27] := (ll--lr--ury--urx--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[28] := (ll--lr--ury--urx--ul--cycle) ;
predefined_shapes[29] := (ll--lrx--lry--ur--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[30] := (bc{right}...{up}rc...tc{left}...{down}lc...{right}bc & bc--tc & tc{left}..{down}lc & lc--rc & rc{up}..tc{left}...{down}lc...{right}bc & cycle) rotated 45;
predefined_shapes[31] := (bc{right}...{up}rc...tc{left}...{down}lc...{right}bc & bc--tc & tc{left}..{down}lc & lc--rc & rc{up}..tc{left}...{down}lc...{right}bc & cycle) ;
predefined_shapes[32] := (ll{right}...{right}lry--ur--ul--ll--cycle) ;
predefined_shapes[33] := (ll{right}...{right}lry--ur--ul--ll--cycle--ul--ulx--ulx shifted(0,yyradius)--ur shifted(yyradius,yyradius)--lry shifted(yyradius,yyradius)--lry shifted(0,yyradius)--ur--ul--cycle ) ;
predefined_shapes[34] := (uly..tc..ury & ury..tc shifted (0,-2yradius)..uly & uly--lly & lly..bc..lry & lry--ury & ury..tc shifted (0,-2yradius)..uly & cycle ) ;
predefined_shapes[35] := (bc{right}...rc{up}...tc{left}...lc{down}...cycle) ;
predefined_shapes[36] := (ul--tc{right}..rc{down}..{left}bc--ll & ll..(xpart llx, ypart lc)..ul & cycle) ;
predefined_shapes[37] := (ul--tc{right}..rc{down}..{left}bc--ll & ll..(xpart llx, ypart lc)..ul & cycle) rotatedaround(origin,180) ;
predefined_shapes[38] := (ll--lc{up}..tc{right}..{down}rc--lr & lr..(xpart bc, ypart lly)..ll & cycle) ;
predefined_shapes[39] := (ll--lc{up}..tc{right}..{down}rc--lr & lr..(xpart bc, ypart lly)..ll & cycle) rotatedaround(origin,180) ;
predefined_shapes[40] := (ll--lr--ur--ul--ll--ur--ul--ll--lr--ul--ll--cycle) ;
predefined_shapes[41] := (ll--lr--ur--ul--ll--lr--rc--lc--ll--bc--tc--ul--ll & cycle) ;
predefined_shapes[42] := (ll--lr--origin shifted (+epsilon,0)--ur--ul--origin shifted (-epsilon,0)--cycle) ;
predefined_shapes[43] := (ll--ul--origin shifted (0,+epsilon)--ur--lr--origin shifted (0,-epsilon)--cycle) ;
predefined_shapes[45] := (bc--rc--tc--lc--cycle) ;
predefined_shapes[46] := (ll--ul--rc--cycle) ;
predefined_shapes[47] := (ll--ul--rc--cycle) rotatedaround(origin,180) ;
predefined_shapes[48] := (ul--ur--bc--cycle) rotatedaround(origin,180) ;
predefined_shapes[49] := (ul--ur--bc--cycle) ;
predefined_shapes[56] := (ll--lry--ury--ul--cycle) ;
predefined_shapes[57] := (ll--lry--ury--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[58] := (ll--ulx--urx--lr--cycle) ;
predefined_shapes[59] := (ll--ulx--urx--lr--cycle) rotatedaround(origin,180);
predefined_shapes[66] := (rc--origin shifted ( epsilon,0) --cycle & rc--origin--cycle ) ;
predefined_shapes[67] := (lc--origin shifted (-epsilon,0) --cycle & lc--origin--cycle ) ;
predefined_shapes[68] := (tc--origin shifted (0, epsilon) --cycle & tc--origin--cycle ) ;
predefined_shapes[69] := (bc--origin shifted (0,-epsilon) --cycle & bc--origin--cycle ) ;
predefined_shapes[75] := (lly--lry--ury--uly--cycle) rotatedaround(origin,180) ;
predefined_shapes[76] := (ll--lr--ur--uly--cycle) rotatedaround(origin,180) ;
predefined_shapes[77] := (ll--lr--ury--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[78] := (lly--lr--ur--ul--cycle) rotatedaround(origin,180) ;
predefined_shapes[79] := (ll--lry--ur--ul--cycle) rotatedaround(origin,180) ;

numeric predefined_shapes_xradius  ; predefined_shapes_xradius  := xradius  ;
numeric predefined_shapes_yradius  ; predefined_shapes_yradius  := yradius  ;
numeric predefined_shapes_xxradius ; predefined_shapes_xxradius := xxradius ;
numeric predefined_shapes_yyradius ; predefined_shapes_yyradius := yyradius ;

endgroup ;

vardef some_shape_path (expr type) =
    if known predefined_shapes[type] : predefined_shapes[type] else : predefined_shapes[0] fi
enddef ;

def some_shape (expr shape_type, shape_width, shape_height, shape_linewidth, shape_linecolor, shape_fillcolor) =
    begingroup ;
        save p ; path p ;
        p := some_shape_path (shape_type) xscaled shape_width yscaled shape_height ;
        pickup pencircle scaled shape_linewidth ;
        fill p withcolor shape_fillcolor ;
        draw p withcolor shape_linecolor ;
    endgroup ;
enddef ;

vardef drawpredefinedshape (expr t, p, lw, lc, fc) =
    save pp ;
    if t>1 : % normal shape
        path pp ;
        pp := some_shape_path(t) xyscaled(bbwidth(p), bbheight(p)) shifted center p ;
        fill pp withcolor fc ;
        draw pp withpen pencircle scaled lw withcolor lc ;
    elseif t=1 : % background only
        path pp ;
        pp := fullsquare xyscaled(bbwidth(p), bbheight(p)) shifted center p ;
        fill pp withcolor fc ;
    else : % dimensions only
        picture pp ; pp := nullpicture ;
        setbounds pp to fullsquare xyscaled(bbwidth(p), bbheight(p)) shifted center p ;
        draw pp ;
    fi ;
enddef ;

vardef drawpredefinedline (expr t, p, lw, lc) =
    if (t>0) and (length(p)>1) :
        saveoptions ;
        drawoptions(withpen pencircle scaled lw withcolor lc) ;
        draw p ;
        if     t =  1 :
            draw arrowheadonpath(p,1) ;
        elseif t =  2 :
            draw arrowheadonpath(reverse p,1) ;
        elseif t =  3 :
            for $ = p,reverse p :
                draw arrowheadonpath($,1) ;
            endfor ;
        elseif t = 11 :
            draw arrowheadonpath(p,1/2) ;
        elseif t = 12 :
            draw arrowheadonpath(reverse p,1/2) ;
        elseif t = 13 :
            for $=p,reverse p :
                draw arrowheadonpath($,1) ;
            endfor ;
            for $=p,reverse p :
                draw arrowheadonpath($,3/4) ;
            endfor ;
        elseif t = 21 :
            for $=1/5,1/2,4/5 :
                draw arrowheadonpath(p,$) ;
            endfor ;
        elseif t = 22 :
            for $=1/5,1/2,4/5 :
                draw arrowheadonpath(reverse p,$) ;
            endfor ;
        elseif t = 23 :
            for $=p,reverse p :
                draw arrowheadonpath($,1/4) ;
            endfor ;
        fi ;
    fi ;
enddef ;

let drawshape = drawpredefinedshape ;
let drawline  = drawpredefinedline  ;
