%D \module
%D   [       file=buff-ver, % was core-ver
%D        version=2000.05.09,
%D          title=\CONTEXT\ Buffer Macros,
%D       subtitle=Verbatim,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt Buffer Macros / Verbatim}

\registerctxluafile{buff-ver}{1.001}

\unprotect

\definesystemattribute[verbatimline][public]

\appendtoksonce
    \attribute\verbatimlineattribute\attributeunsetvalue
\to \everyforgetall

%D Initializations.

\installcorenamespace{typinglines}
\installcorenamespace{typingspace}
\installcorenamespace{typingblank} % needs checking ... used?

\newtoks\everyinitializeverbatim

\appendtoks
    \the\everyresettypesetting
    \resetfontfeature
    \resetcharacterspacing
\to \everyinitializeverbatim

\def\setverbatimspaceskip % to be checked: must happen after font switch
  {\spaceskip\fontcharwd\font`x\relax
   \xspaceskip\spaceskip}

\unexpanded\def\specialcontrolspace{\hskip\zeropoint\fastcontrolspace\hskip\zeropoint}

\setvalue{\??typinglines\v!yes       }{\obeybreakpoints}
\setvalue{\??typinglines\v!hyphenated}{\obeyhyphens}

\setvalue{\??typingspace\v!on        }{\let\obeyedspace\specialcontrolspace}
\setvalue{\??typingspace\v!stretch   }{\let\obeyedspace\specialstretchedspace}
\setvalue{\??typingspace\v!normal    }{}
\setvalue{\??typingspace\v!fixed     }{\let\obeyedspace\specialfixedspace}

\setvalue{\??typingblank\v!standard  }{\s_spac_whitespace_parskip}
\setvalue{\??typingblank\v!small     }{\smallskipamount}
\setvalue{\??typingblank\v!medium    }{\medskipamount}
\setvalue{\??typingblank\v!big       }{\bigskipamount}
\setvalue{\??typingblank\v!halfline  }{.5\baselineskip}
\setvalue{\??typingblank\v!line      }{\baselineskip}
\setvalue{\??typingblank\v!none      }{\zeropoint}

\def\buff_verbatim_initialize_type_one
  {\let\obeylines\ignorelines
   \ignorehyphens % default
   \usetypestyleandcolor\c!style\c!color
   \setcatcodetable\vrbcatcodes}

\def\buff_verbatim_initialize_type_two
  {\let\obeyedspace\specialobeyedspace
   \csname\??typingspace\typeparameter\c!space\endcsname
   \relax\the\everyinitializeverbatim\relax}

\let\buff_verbatim_set_line_margin\relax

\def\buff_verbatim_set_line_margin_indeed
  {\getpagestatus
   \hskip\ifrightpage\typingparameter\c!oddmargin\else\typingparameter\c!evenmargin\fi\relax}

\def\buff_verbatim_check_margins
  {\scratchskip\typingparameter\c!oddmargin\relax
   \ifzeropt\scratchskip
   \else
     \let\buff_verbatim_set_line_margin\buff_verbatim_set_line_margin_indeed
   \fi
   \scratchskip\typingparameter\c!evenmargin\relax
   \ifzeropt\scratchskip
   \else
     \let\buff_verbatim_set_line_margin\buff_verbatim_set_line_margin_indeed
   \fi
   \ifx\buff_verbatim_set_line_margin\relax
     \doadaptleftskip{\typingparameter\c!margin}%
   \fi}

\def\buff_verbatim_initialize_typing_one
  {\switchtobodyfont[\typingparameter\c!bodyfont]% can be low level call
   \buff_verbatim_check_margins
   \usetypingstyleandcolor\c!style\c!color
   \doifsomething{\typingparameter\c!align}{\setupalign[\typingparameter\c!align]}%
   \ignorehyphens} % default

\def\buff_verbatim_initialize_typing_two
  {\let\obeyedspace\specialobeyedspace
   \csname\??typingspace\typingparameter\c!space\endcsname
   \csname\??typinglines\typingparameter\c!lines\endcsname
   \relax\the\everyinitializeverbatim\relax}

%D \macros
%D   {definetype,setuptype}
%D
%D Specific inline verbatim commands can be defined with the
%D following command.

\installcorenamespace{type}

\installcommandhandler \??type {type} \??type

\appendtoks
    \setuevalue{\currenttype}{\buff_verbatim_type{\currenttype}}%
\to \everydefinetype

\appendtoks
   \buff_verbatim_initialize_visualizer{\typeparameter\c!option}%
\to \everysetuptype

%D \macros
%D   {definetyping,setuptyping}
%D
%D For most users the standard \type{\start}||\type{\stop}||pair
%D will suffice, but for documentation purposes the next
%D definition command can be of use:
%D
%D \starttyping
%D \definetyping[extratyping][margin=3em]
%D
%D \startextratyping
%D these extra ones are indented by 1 em
%D \stopextratyping
%D \stoptyping
%D
%D The definitions default to the standard typing values.

\installcorenamespace{typing}

\installcommandhandler \??typing {typing} \??typing

\appendtoks
    \setuevalue{\e!start\currenttyping}{\buff_verbatim_typing_start{\currenttyping}}%
    \setuevalue{\e!stop \currenttyping}{\buff_verbatim_typing_stop {\currenttyping}}%
    \normalexpanded{\definelinenumbering[\currenttyping]}%
\to \everydefinetyping

\appendtoks
   \buff_verbatim_initialize_visualizer{\typingparameter\c!option}% we can check at the tex end
\to \everysetuptyping

\def\buff_verbatim_initialize_visualizer#1%
  {\ifproductionrun\ctxcommand{loadvisualizer("#1")}\fi}

%D Verbatim command are very sensitive to argument processing,
%D which is a direct result of the \CATCODES\ being fixed at
%D reading time.
%D
%D Typesetting inline verbatim can be accomplished by
%D \type{\type}, which in this sentence was typeset by saying
%D just \type{\type{\type}}, which in turn was typeset by
%D \unknown. Using the normal grouping characters \type{{}} is
%D the most natural way of using this command.
%D
%D A second, more or less redundant, alternative is delimiting
%D the argument with an own character. This method was
%D implemented in the context of a publication in the \MAPS,
%D where this way of delimiting is recognized by \LATEX\ users.
%D
%D The third, more original alternative, is the one using
%D \type{<<} and \type{>>} as delimiters. This alternative can
%D be used in situations where slanted typeseting is needed.

%D \macros
%D   {type}
%D
%D We define \type{\type} as a protected command. This command
%D has several invocations: grouped, wirt boundary characters,
%D and with font switches.
%D
%D \starttyping
%D normal: \par \type{xx<<..xx..<<xx <<xx>> >>..>>xx} \par \type<<....>> \par \type<<..<<xx>>..>> \par
%D normal: \par \type{xx<..xx..<xx <slanted> >..>xx} \par \type{<....>} \par \type{<..<xx>..>}
%D \setuptype[option=slanted]
%D slanted: \par \type{xx<<..sl..<<xx <<sl>> xx>>..sl..>>xx} \par \type<<..xx..>> \par \type<<..<<sl>>..>> \par
%D slanted: \par \type{xx<<..sl..<xx <sl> xx>..sl..>>xx} \par \type<<..xx..>> \par \type<<..<sl>..>> \par
%D \setuptype[option=none]
%D none: \par \type{xx<<..xx..<<xx <<xx>> >>..>>xx} \par \type<<....>> \par \type<<..<<xx>>..>> \par
%D \stoptyping
%D
%D When writing the manual to \CONTEXT\ and documenting this
%D source we needed to typeset \type{<<} and \type{>>}. Because
%D we wanted to do this in the natural way, we've adapted the
%D original definition a bit. This implementation went through
%D several live cycles. The final implementation looks a bit
%D further and treats the lone \type{<<} and \type{>>} a bit
%D different. The \type {\null} prevents ligatures, which
%D unfortunately turn up in Lucida fonts.
%D
%D The following lines show what happens when we set
%D \type {option=commands}.
%D
%D \startbuffer
%D \starttyping
%D test//test test/BTEX \footnote{test test test}/ETEX test
%D test//test test/BTEX \footnote{test test test}/ETEX  test
%D test test test/BTEX \bf(nota bene)/ETEX test
%D test test test /BTEX \bf(nota bene)/ETEX  test
%D \stoptyping
%D \stopbuffer
%D
%D % \bgroup\setuptyping[option=commands]\getbuffer\egroup
%D
%D this was keyed in as:
%D
%D \typebuffer

% Beware, the command is supposed to do something like \framed and not
% manipulate content i.e. it gets no argument but something b/egrouped
% instead:

\def\buff_verbatim_left_of_type
  {\typeparameter\c!left
   \typeparameter\c!command\bgroup}

\def\buff_verbatim_right_of_type
  {\egroup
   \typeparameter\c!right}

\unexpanded\def\type{\buff_verbatim_type\empty}
\unexpanded\def\typ {\buff_verbatim_typ \empty}

\unexpanded\def\buff_verbatim_type#1%
  {\dontleavehmode
   \bgroup
   \edef\currenttype{#1}%
   \doifnextoptionalelse\buff_verbatim_type_yes\buff_verbatim_type_nop}

\def\buff_verbatim_type_yes[#1]%
  {\setupcurrenttype[#1]%
   \buff_verbatim_type_nop}

\def\buff_verbatim_type_nop
  {\buff_verbatim_left_of_type
   \futurelet\next\buff_verbatim_type_one}

\def\buff_verbatim_typ#1%
  {\dontleavehmode
   \bgroup
   \edef\currenttype{#1}%
   \lettypeparameter\v!lines\v!hyphenated
   \let\specialobeyedspace\specialstretchedspace
   \doifnextoptionalelse\buff_verbatim_type_yes\buff_verbatim_type_nop}

\def\buff_verbatim_type_one
  {\ifx\next\bgroup
     \expandafter\buff_verbatim_type_a
   \else
     \expandafter\buff_verbatim_type_two
   \fi}

\def\buff_verbatim_type_two
  {\catcode`<=\othercatcode % old precaution
   \catcode`>=\othercatcode % old precaution
   \futurelet\next\buff_verbatim_type_three}

\def\buff_verbatim_type_three
  {\if\next<%
     \expandafter\buff_verbatim_type_b
   \else
     \expandafter\buff_verbatim_type_c
   \fi}

\def\buff_verbatim_type_a
  {\buff_verbatim_initialize_type_one
   \setcatcodetable\tpacatcodes
   \buff_verbatim_type_normal}

\def\buff_verbatim_type_b#1%
  {\buff_verbatim_initialize_type_one
   \setcatcodetable\tpbcatcodes
   \buff_verbatim_type_nested}

\def\buff_verbatim_type_c#1%
  {\buff_verbatim_initialize_type_one
   \setcatcodetable\vrbcatcodes
   \def\next##1#1{\buff_verbatim_type_normal{##1}}%
   \next}

\def\buff_verbatim_type_normal#1%
  {\buff_verbatim_initialize_type_two
   \dostarttagged\t!verbatim\currenttype
   \ctxcommand{typestring{
     data   = \!!bs\detokenize{#1}\!!es,
     tab    = "\typeparameter\c!tab",
     method = "\typeparameter\c!option",
     nature = "inline",
    }}%
   \dostoptagged
   \buff_verbatim_right_of_type
   \egroup}

\def\buff_verbatim_type_nested#1%
  {\buff_verbatim_initialize_type_two
   \dostarttagged\t!verbatim\currenttype
   \ctxcommand{typestring{
     data   = \!!bs\detokenize{#1}\!!es,
     tab    = "\typeparameter\c!tab",
     method = "nested", % we force a special visualizer
     option = "\typeparameter\c!option", % extra visualizer (maybe: nested,\typeparameter\c!option)
     nature = "inline",
   }}%
   \dostoptagged
   \buff_verbatim_right_of_type
   \egroup
   \gobbleoneargument} % grab last >

%D \macros
%D   {obeyhyphens,obeybreakpoints}
%D
%D Although it's not clear from the macros, one character
%D trait of this macros, which are build on top of the support
%D module, is that they don't hyphenate. We therefore offer
%D the alternative \type{\typ}. The current implementation
%D works all right, but a decent hyphenation support of
%D \type{\tt} text will be implemented soon.

\unexpanded\def\specialfixedspace    {\kern\interwordspace\relax}
\unexpanded\def\specialobeyedspace   {\hskip\interwordspace\relax} % better than spaceskip
\unexpanded\def\specialstretchedspace{\hskip.5\interwordspace\!!plus.125\interwordstretch\relax} % more but not less
\unexpanded\def\specialcontrolspace  {\hskip\zeropoint\hbox{\normalcontrolspace}\hskip\zeropoint\relax}

\unexpanded\def\obeyhyphens
  {\let\obeyedspace \specialobeyedspace % maybe \specialstretchedspace
   \let\controlspace\specialcontrolspace
   \spaceskip.25em\relax} % hm a bit of stretch !

\unexpanded\def\obeybreakpoints
  {\ignorehyphens
   \veryraggedright}

\unexpanded\def\ignorehyphens
  {\language\minusone % extra bonus, the \null should do the job too
   \let\obeyedspace \specialobeyedspace
   \let\controlspace\specialcontrolspace
   \spaceskip.5em\relax}

%D \macros
%D   {tex,arg,mat,dis,astype}
%D
%D Sometimes, for instance when we pass verbatim text as an
%D argument, the fixed \CATCODES\ interfere with our wishes. An
%D experimental implementation of character by character
%D processing of verbatim text did overcome this limitation,
%D but we've decided not to use that slow and sometimes
%D troublesome solution. Instead we stick to some 'old'
%D \CONTEXT\ macros for typesetting typical \TEX\ characters.

\def\lesscharacter    {<} % obsolete
\def\morecharacter    {>} % obsolete

\let\texescape        \textbackslash
\let\leftargument     \textbraceleft
\let\rightargument    \textbraceright
\let\inlinemathmarker \textdollar
\def\displaymathmarker{\textdollar\textdollar}

\def\buff_verbatim_special_type#1#2%
  {\dontleavehmode\bgroup
   \buff_verbatim_initialize_type_one
   \catcode\leftbraceasciicode \begingroupcatcode
   \catcode\rightbraceasciicode\endgroupcatcode
   #1%
   \aftergroup#2%
   \let\nexttoken}

\unexpanded\def\tex{\buff_verbatim_special_type\texescape        \relax}
\unexpanded\def\arg{\buff_verbatim_special_type\leftargument     \rightargument}
\unexpanded\def\mat{\buff_verbatim_special_type\inlinemathmarker \inlinemathmarker}
\unexpanded\def\dis{\buff_verbatim_special_type\displaymathmarker\displaymathmarker}

\let\normaltexttex\tex
\let\normaltextarg\arg
\let\normaltextmat\mat
\let\normaltextdis\dis

\unexpanded\def\astype{\bgroup\usetypestyleandcolor\c!style\c!color\let\nexttoken}

%D The basic display verbatim commands are defined in an indirect way. As we
%D will see, they are a specific case of a more general mechanism.

\let\beginofverbatimlines\relax % hooks
\let\endofverbatimlines  \relax % hooks

\unexpanded\def\buff_verbatim_typing_start#1% tricky non standard lookahead
  {\begingroup
   \edef\currenttyping{#1}%
   \obeylines
   \futurelet\nexttoken\buff_verbatim_typing_start_indeed}

\def\buff_verbatim_typing_start_indeed
  {\ifx\nexttoken[%
     \expandafter\buff_verbatim_typing_start_yes
   \else
     \expandafter\buff_verbatim_typing_start_nop
   \fi}

\def\buff_verbatim_typing_start_nop
  {\typingparameter\c!before
   \startpacked[\v!blank]
   \buff_verbatim_setup_line_numbering
   \buff_verbatim_initialize_typing_one
   \normalexpanded{\buff_verbatim_type_block{\e!start\currenttyping}{\e!stop\currenttyping}}}

\def\buff_verbatim_typing_start_yes[#1]%
  {\typingparameter\c!before
   \startpacked[\v!blank]
   \doifassignmentelse{#1}
     {\setuptyping[\currenttyping][#1]}
     {\doifinset\v!continue{#1}{\setuptyping[\currenttyping][\c!continue=\v!yes]}}%
   \buff_verbatim_setup_line_numbering
   \buff_verbatim_initialize_typing_one
   \normalexpanded{\buff_verbatim_type_block{\e!start\currenttyping}{\e!stop\currenttyping}}}

\unexpanded\def\buff_verbatim_type_block#1#2%
  {\buff_pickup{_typing_}{#1}{#2}{}{\buff_verbatim_type_block_verbatim_indeed{#1}{#2}}} % was dowithbuffer

\def\buff_verbatim_type_block_verbatim_indeed#1#2%
  {\buff_verbatim_initialize_typing_two
   \dostarttagged\t!verbatimblock\currenttyping
   \beginofverbatimlines
   \dostarttagged\t!verbatimlines\empty
   \ctxcommand{typebuffer {
     name   = "_typing_",
     strip  = "\typingparameter\c!strip",
     range  = "\typingparameter\c!range",
     tab    = "\typingparameter\c!tab",
     method = "\typingparameter\c!option",
     escape = \!!bs\typingparameter\c!escape\!!es,
     nature = "display",
   }}%
   \dostoptagged
   \endofverbatimlines
   \dostoptagged
   \csname#2\endcsname}

\unexpanded\def\buff_verbatim_typing_stop#1% hm, currenttyping
  {\stoppacked
   \typingparameter\c!after
   \useindentnextparameter\typingparameter
   \endgroup
   \dorechecknextindentation}

%D Line numbering for files is combined with filtering, while
%D display verbatim has the ability to continue.
%D
%D \starttyping
%D \typefile[numbering=file,start=10,stop=12]{test.tex}
%D
%D \definetyping[code][numbering=line]
%D
%D \starttext
%D \startcode
%D ...
%D ...
%D \stopcode
%D
%D \startcode[start=continue]
%D ...
%D ...
%D \stopcode
%D
%D \startcode[start=10]
%D ...
%D \stopcode
%D \stoptyping

%D Ranges:
%D
%D \starttyping
%D % label:start:one
%D
%D \def\MyMacro
%D   {just an example}
%D
%D % label:stop:one
%D
%D \starttext
%D
%D % \typefile[file][range={3,6}] {whatever.tex}
%D % \typefile[file][range={3,+2}]{whatever.tex}
%D
%D \typefile[file][range={label:start:one,label:stop:one}]{whatever.tex}
%D
%D \stoptext
%D \stoptyping

%D \macros
%D   {typefile}
%D
%D Typesetting files verbatim (for the moment) only supports
%D colorization of \TEX\ sources as valid option. The other
%D setup values are inherited from display verbatim.
%D The implementation of \type{\typefile} is straightforward:

% [category] [settings] {name} % for historic reasons, all filenames are {}

\unexpanded\def\typefile
  {\dodoubleempty\buff_verbatim_type_file}

\def\buff_verbatim_type_file[#1][#2]#3%
  {\begingroup
   \ifsecondargument
     \setuptyping[#1][#2]%
     \buff_verbatim_type_file_checked{#1}{#3}%
   \else\iffirstargument
     \doifassignmentelse{#1}
       {\setuptyping[\v!file][#1]
        \buff_verbatim_type_file_checked\v!file{#3}}
       {\buff_verbatim_type_file_checked{#1}{#3}}%
   \else
     \buff_verbatim_type_file_checked\v!file{#3}%
   \fi\fi
   \endgroup}

\def\buff_verbatim_type_file_checked#1#2%
  {\doifelsetypingfile{#2}
     {\buff_verbatim_type_file_indeed{#1}\askedtypingfile}
     {\showmessage\m!verbatims1{#2}}}

\unexpanded\def\doifelsetypingfile#1%
  {\edef\askedtypingfile{\locfilename{#1}}%
   \ifx\askedtypingfile\empty
     \edef\askedtypingfile{\locfilename{#1.tex}}% downward compatible
   \fi
   \ifx\askedtypingfile\empty
     \expandafter\secondoftwoarguments
   \else
     \expandafter\firstoftwoarguments
   \fi}

\def\buff_verbatim_type_file_indeed#1#2% category name
  {\edef\currenttyping{#1}%
   \typingparameter\c!before
   \startpacked[\v!blank]
   \buff_verbatim_setup_line_numbering
   \buff_verbatim_initialize_typing_one
   \buff_verbatim_initialize_typing_two
   \dostarttagged\t!verbatimblock\currenttyping
   \beginofverbatimlines
   \dostarttagged\t!verbatimlines\empty
   \ctxcommand{typefile {
      name   = "#2",
      strip  = "\typingparameter\c!strip",
      range  = "\typingparameter\c!range",
      regime = "\currentregime",
      tab    = "\typingparameter\c!tab",
      method = "\typingparameter\c!option",
      nature = "display",
    }}%
   \dostoptagged
   \endofverbatimlines
   \dostoptagged
   \stoppacked
   \typingparameter\c!after}

%D Line numbering:

\newconditional\verbatimnumberinglines

\def\beginofverbatimlinenumbering
  {\startlinenumbering
     [\currenttyping]%
     [\c!continue=\typingparameter\c!continue,
        \c!method=\v!type,
         \c!start=\typingparameter\c!start,
          \c!stop=\typingparameter\c!stop, % ?
          \c!step=\typingparameter\c!step]}

\def\endofverbatimlinenumbering
  {\stoplinenumbering}

\def\buff_verbatim_setup_line_numbering
  {\ifdefined\startlinenumbering
     \edef\currenttypingnumbering{\typingparameter\c!numbering}%
     \ifx\currenttypingnumbering\v!file
       \setuplinenumbering[\currenttyping][\c!method=\v!file]%
       \settrue\verbatimnumberinglines
     \else\ifx\currenttypingnumbering\v!line
       \settrue\verbatimnumberinglines
     \else
       \setfalse\verbatimnumberinglines
     \fi\fi
     \ifconditional\verbatimnumberinglines
       \let\beginofverbatimlines\beginofverbatimlinenumbering
       \let\endofverbatimlines  \endofverbatimlinenumbering
     \fi
   \fi}

%D \macros
%D   {filename}
%D
%D Typesetting filenames in monospaced fonts is possible with
%D
%D \starttyping
%D \filename{here/there/filename.suffix}
%D \stoptyping
%D
%D The definition is not that spectacular.

\unexpanded\def\filename#1{{\tttf\hyphenatedfilename{#1}}}

%D \macros
%D   {verbatim}
%d
%D And a bonus macro, an unexpanded detokenize:

\unexpanded\def\verbatim#1{\detokenize{#1}}

%D The setups for display verbatim and file verbatim are
%D shared. One can adapt the extra defined typing environments,
%D but they also default to the values below. Watch the
%D alternative escape character.

% \tttf   gives problems with {\tx \type...}
% \tt\tf  does not adapt to e.g. \bf

\setuptyping
  [\c!before=\blank,
   \c!after=\blank,
  %\c!bodyfont=,
  %\c!color=,
   \c!space=\v!off,
   \c!page=\v!no,
   \c!tab=\v!yes, % what is this: \s!ascii ?
   \c!option=\v!none,
   \c!text=\v!no,
   \c!style=\tt,
   \c!indentnext=\v!yes,
   \c!margin=\!!zeropoint,
   \c!evenmargin=\!!zeropoint,
   \c!oddmargin=\!!zeropoint,
   \c!blank=\v!line,
  %\c!escape=, % yes | no | {START,STOP} | default when yes: {BTEX,ETEX}
   \c!numbering=\v!no,
  %\c!lines=,
  %\c!range=,
   \c!start=1,
  %\c!stop=,
   \c!step=1,
  %\c!continue=,
   \c!strip=\v!no] % auto or number

\definetyping[\v!typing]

\setuptyping[\v!file]  [\s!parent=\??typing\v!typing] % we don't want \start..\stop overload
\setuptyping[\v!buffer][\s!parent=\??typing\v!file]   % we don't want \start..\stop overload

%D The setups for inline verbatim default to:

\setuptype
  [\c!space=\v!off,
  %\c!color=,
   \c!style=\tt,
  %\c!option=\v!normal,
   \c!page=\v!no,
   \c!tab=\v!yes]

%D Buffers

% [name] [settings] | [name] | [settings]

\unexpanded\def\typebuffer
  {\dodoubleempty\buff_verbatim_type_buffer}

\unexpanded\def\buff_verbatim_type_defined_buffer
  {\dotripleempty\buff_verbatim_type_defined_buffer_indeed}

\appendtoks
    \setuevalue{\e!type\currentbuffer}{\buff_verbatim_type_defined_buffer[\v!buffer][\currentdefinedbuffer]}%
\to \everydefinebuffer

\unexpanded\def\buff_verbatim_type_buffer[#1][#2]%
  {\begingroup
   \ifsecondargument
     \setuptyping[\v!buffer][#2]%
     \processcommalist[#1]{\buff_verbatim_type_buffer_indeed\v!buffer}% [name] [settings]
   \else\iffirstargument
     \doifassignmentelse{#1}
       {\setuptyping[\v!buffer][#1]%
        \buff_verbatim_type_buffer_indeed\v!buffer\empty}% [settings]
       {\processcommalist[#1]{\buff_verbatim_type_buffer_indeed\v!buffer}}% [name]
   \else
     \buff_verbatim_type_buffer_indeed\v!buffer\empty% []
   \fi\fi
   \endgroup}

\def\buff_verbatim_type_defined_buffer_indeed[#1][#2][#3]% category name settings
  {\begingroup
   \ifthirdargument
     \setuptyping[#1][#3]%
   \fi
   \buff_verbatim_type_buffer_indeed{#1}{#2}%
   \endgroup}

\def\buff_verbatim_type_buffer_indeed#1#2% category name
  {\edef\currenttyping{#1}%
   \typingparameter\c!before
   \startpacked[\v!blank]
   \buff_verbatim_setup_line_numbering
   \buff_verbatim_initialize_typing_one
   \buff_verbatim_initialize_typing_two
   \beginofverbatimlines
   \dostarttagged\t!verbatimblock{#1}%
   \ctxcommand{typebuffer {
     name   = "#2",
     strip  = "\typingparameter\c!strip",
     range  = "\typingparameter\c!range",
     regime = "\currentregime",
     tab    = "\typingparameter\c!tab",
     method = "\typingparameter\c!option",
     escape = \!!bs\typingparameter\c!escape\!!es,
     nature = "display",
   }}%
   \dostoptagged
   \endofverbatimlines
   \stoppacked
   \typingparameter\c!after}

% get     : before/after of buffer
% typing  : before/after of typing
% process : no before/after (special case anyway)

% the next one is obsolete (bad name and used nowhere) so if it stays
% the name will change

\unexpanded\def\processbuffer
  {\writestatus{nota bene}{\string\processbuffer\space is obsolete}%
   \dodoubleempty\buff_verbatim_process}

\def\buff_verbatim_process[#1][#2]%
  {\begingroup
   \ifsecondargument
     \setuptyping[\v!buffer][#2]%
     \processcommalist[#1]{\buff_verbatim_process_indeed\v!buffer}% [name] [settings]
   \else\iffirstargument
     \doifassignmentelse{#1}
       {\setuptyping[\v!buffer][#1]%
        \buff_verbatim_process_indeed\v!buffer\empty}% [settings]
       {\processcommalist[#1]{\buff_verbatim_process_indeed\v!buffer}}% [name]
   \else
     \buff_verbatim_process_indeed\v!buffer\empty% []
   \fi\fi
   \endgroup}

\def\buff_verbatim_process_indeed#1#2%
  {\edef\currenttyping{#1}%
   \ctxcommand{processbuffer {
     name   = "#2",
     strip  = "\typingparameter\c!strip",
     tab    = "\typingparameter\c!tab",
     method = "\typingparameter\c!option",
     nature = "direct",
   }}}

% so far for obsolete

% line numbering, keep broken lines together

\newcount\nofverbatimlines

\unexpanded\def\buff_verbatim_begin_of_line
  {\ifconditional\verbatimnumberinglines
     \global\advance\nofverbatimlines\plusone
     \attribute\verbatimlineattribute\nofverbatimlines
   \fi
   \noindent
   \buff_verbatim_set_line_margin
   \the\everyline\strut
   \dostarttagged\t!verbatimline\empty}

\unexpanded\def\buff_verbatim_end_of_line
  {\dostoptagged
   \obeyedline % still needed?
   \par
   \ifconditional\verbatimnumberinglines
     \attribute\verbatimlineattribute\attributeunsetvalue
   \fi}

\unexpanded\def\buff_verbatim_empty_line
  {\dostoptagged
   \ifconditional\verbatimnumberinglines
     \par\strut\par % this will be an option where we use a signal instead of a strut
   \else
     \blank[\typingparameter\c!blank]%
   \fi
    \dostarttagged\t!verbatimlines\empty}

% hooks:

\def\doinlineverbatimstart      {}
\def\doinlineverbatimstop       {}
\def\doinlineverbatimbeginline  {}
\def\doinlineverbatimnewline    {\obeyedspace}
\def\doinlineverbatimemptyline  {\obeyedspace}

\def\dodisplayverbatimstart     {\buff_verbatim_begin_of_line}
\def\dodisplayverbatimstop      {\buff_verbatim_end_of_line}
\def\dodisplayverbatimbeginline {\buff_verbatim_begin_of_line}
\def\dodisplayverbatimnewline   {\buff_verbatim_end_of_line\par}
\def\dodisplayverbatimemptyline {\buff_verbatim_empty_line}

\def\doverbatimspace            {\obeyedspace}

\loadmarkfile{buff-imp-default}    % preloaded as otherwise spurious spaces inline due to loading
\loadmarkfile{buff-imp-nested}     % preloaded as otherwise spurious spaces inline due to loading
\loadmarkfile{buff-imp-escaped}    % for completeness

%D To be considered:

% \installcorenamespace{visualizer}
%
% \installcommandhandler \??visualizer {visualizer} \??visualizer
%
% \appendtoks
%     \setuevalue{\currentvisualizer}{\buff_verbatim_visualize{\currentvisualizer}}%
% \to \everydefinevisualizer
%
% \unexpanded\def\buff_verbatim_visualize#1%
%   {\bgroup
%    \def\currentvisualizer{#1}%
%    \usevisualizerstyleandcolor\c!style\c!color
%    \let\next}

\protect \endinput
