%D \module
%D   [       file=core-env, % was core-new
%D        version=1995.01.01, % wrong
%D          title=\CONTEXT\ Core Macros,
%D       subtitle=New ones,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt Core Macros / Environments}

\registerctxluafile{core-env}{1.001}

\unprotect

%D Modes:
%D
%D \starttyping
%D \enablemode[screen,paper,bound]
%D
%D \doifmodeelse {paper}        {this} {that}
%D \doifmode     {paper,screen} {this}
%D \doifnotmode  {paper,bound}  {that}
%D
%D \startmode [list]
%D \stopmode
%D
%D \startnotmode [list]
%D \stopnotmode
%D \stoptyping
%D
%D system modes have a * as prefix
%D
%D Sometimes, we want to prevent a mode for being set. Think
%D of situations where a style enables a mode, but an outer
%D level style does not want that. Preventing can be
%D considered a permanent disabling on forehand.

\def\systemmodeprefix{*}

% we will have \installcorenamespace{mode} but need some hackery at the lua end then

\installcorenamespace{modestack}

% todo: check prevent mode, also at the lua end

\setnewconstant\disabledmode \zerocount
\setnewconstant\enabledmode  \plusone
\setnewconstant\preventedmode\plustwo

% fast internal ones

\def\system_modes_new#1%
  {\expandafter\newcount\csname\s!mode#1\endcsname}

\unexpanded\def\newmode#1%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi}

\unexpanded\def\setmode#1%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \csname\s!mode#1\endcsname\enabledmode}

\unexpanded\def\resetmode#1%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \csname\s!mode#1\endcsname\disabledmode}

\unexpanded\def\newsystemmode#1%
  {\ifcsname\s!mode\systemmodeprefix#1\endcsname\else\system_modes_new{\systemmodeprefix#1}\fi}

\unexpanded\def\setsystemmode#1%
  {\ifcsname\s!mode\systemmodeprefix#1\endcsname\else\system_modes_new{\systemmodeprefix#1}\fi
   \csname\s!mode\systemmodeprefix#1\endcsname\enabledmode}

\unexpanded\def\resetsystemmode#1%
  {\ifcsname\s!mode\systemmodeprefix#1\endcsname\else\system_modes_new{\systemmodeprefix#1}\fi
   \csname\s!mode\systemmodeprefix#1\endcsname\disabledmode}

% \def\dosetsystemmode#1%
%   {\csname\s!mode\systemmodeprefix#1\endcsname\enabledmode}
%
% \def\doresetsystemmode#1%
%   {\csname\s!mode\systemmodeprefix#1\endcsname\disabledmode}

% demo: trialtypesetting is a systemmode as well as an if

\newsystemmode{trialtypesetting} % the name of \@@trialtypesetting might change (also at the lua end)

\expandafter\let\expandafter\@@trialtypesetting\csname\s!mode\systemmodeprefix trialtypesetting\endcsname % private !

\appendtoks
    \@@trialtypesetting\enabledmode
\to \everysettrialtypesetting

\appendtoks
    \@@trialtypesetting\disabledmode
\to \everyresettrialtypesetting

% user ones

\unexpanded\def\preventmode{\unprotect\system_modes_prevent}
\unexpanded\def\enablemode {\unprotect\system_modes_enable }
\unexpanded\def\disablemode{\unprotect\system_modes_disable}

\let\definemode\disablemode % nicer

\def\system_modes_prevent[#1]{\protect\rawprocesscommacommand[#1]\system_modes_prevent_indeed}
\def\system_modes_enable [#1]{\protect\rawprocesscommacommand[#1]\system_modes_enable_indeed }
\def\system_modes_disable[#1]{\protect\rawprocesscommacommand[#1]\system_modes_disable_indeed}

\def\system_modes_prevent_indeed#1%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \csname\s!mode#1\endcsname\preventedmode}

\def\system_modes_enable_indeed#1% we can speed it up by moving the new outside
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \ifnum\csname\s!mode#1\endcsname=\preventedmode \else
     \csname\s!mode#1\endcsname\enabledmode
   \fi}

\def\system_modes_disable_indeed#1%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \ifnum\csname\s!mode#1\endcsname=\preventedmode \else
     \csname\s!mode#1\endcsname\disabledmode
   \fi}

% handy for mp

\def\booleanmodevalue#1%
  {\ifcsname\s!mode#1\endcsname\ifcase\csname\s!mode#1\endcsname\s!false\else\s!true\fi\else\s!false\fi}

% check macros

% For some reason the older version had an unprotect for grabbing the
% mode list (only) which does not really make sense any more so that
% has been removed. One should (un)protect at the outer level instead.

\newconditional\c_checked_mode

\def\system_modes_check_indeed#1%
  {\ifcsname\s!mode#1\endcsname
     \ifcase\csname\s!mode#1\endcsname\else
       \let\system_modes_check_step\gobbleoneargument
     \fi
   \fi}

\def\system_modes_check#1#2#3%
  {\let\system_modes_check_step\system_modes_check_indeed
   \rawprocesscommacommand[#3]\system_modes_check_step
   \ifx\system_modes_check_step\gobbleoneargument
     \expandafter#1%
   \else
     \expandafter#2%
   \fi}

\def\system_modes_check_all_indeed#1%
  {\ifcsname\s!mode#1\endcsname
     \ifcase\csname\s!mode#1\endcsname
       \let\system_modes_check_all_step\gobbleoneargument
     \fi
   \else
     \let\system_modes_check_all_step\gobbleoneargument
   \fi}

\def\system_modes_check_all#1#2#3%
  {\let\system_modes_check_all_step\system_modes_check_all_indeed
   \rawprocesscommacommand[#3]\system_modes_check_all_step
   \ifx\system_modes_check_all_step\gobbleoneargument
     \expandafter#2
   \else
     \expandafter#1
   \fi}

\unexpanded\def\doifmodeelse        {\system_modes_check\firstoftwoarguments\secondoftwoarguments}
\unexpanded\def\doifmode            {\system_modes_check\firstofoneargument\gobbleoneargument}
\unexpanded\def\doifnotmode         {\system_modes_check\gobbleoneargument\firstofoneargument}
\unexpanded\def\startmode       [#1]{\system_modes_check\donothing\system_modes_stop_yes{#1}}
\unexpanded\def\startnotmode    [#1]{\system_modes_check\system_modes_stop_nop\donothing{#1}}
\unexpanded\def\doifallmodeselse    {\system_modes_check_all\firstoftwoarguments\secondoftwoarguments}
\unexpanded\def\doifallmodes        {\system_modes_check_all\firstofoneargument\gobbleoneargument}
\unexpanded\def\doifnotallmodes     {\system_modes_check_all\gobbleoneargument\firstofoneargument}
\unexpanded\def\startallmodes   [#1]{\system_modes_check_all\donothing\system_modes_stop_all_yes{#1}}
\unexpanded\def\startnotallmodes[#1]{\system_modes_check_all\system_modes_stop_all_nop\donothing{#1}}

\unexpanded\def\stopmode         {} % no relax
\unexpanded\def\stopnotmode      {} % no relax
\unexpanded\def\stopallmodes     {} % no relax
\unexpanded\def\stopnotallmodes  {} % no relax

\def\system_modes_stop_yes    #1\stopmode       {}
\def\system_modes_stop_nop    #1\stopnotmode    {}
\def\system_modes_stop_all_yes#1\stopallmodes   {}
\def\system_modes_stop_all_nop#1\stopnotallmodes{}

%D Pushing/popping:

\unexpanded\def\pushmode[#1]%
  {\ifcsname\s!mode#1\endcsname\else\system_modes_new{#1}\fi
   \expandafter\edef\csname\??modestack#1\endcsname{\number\csname\s!mode#1\endcsname}%
   \expandafter\pushmacro\csname\??modestack#1\endcsname}

\unexpanded\def\popmode[#1]%
  {\ifcsname\??modestack#1\endcsname
     \expandafter\popmacro\csname\??modestack#1\endcsname
     \csname\s!mode#1\endcsname\csname\??modestack#1\endcsname\relax
   \fi}

\def\pushsystemmode#1%
  {\ifcsname\s!mode\systemmodeprefix#1\endcsname\else\system_modes_new{\systemmodeprefix#1}\fi
   \expandafter\edef\csname\??modestack\systemmodeprefix#1\endcsname{\number\csname\s!mode\systemmodeprefix#1\endcsname}%
   \expandafter\pushmacro\csname\??modestack\systemmodeprefix#1\endcsname}

\def\popsystemmode#1%
  {\ifcsname\??modestack\systemmodeprefix#1\endcsname
     \expandafter\popmacro\csname\??modestack\systemmodeprefix#1\endcsname
     \csname\s!mode\systemmodeprefix#1\endcsname\csname\??modestack\systemmodeprefix#1\endcsname\relax
   \fi}

%D Lets now set a mode:

\enablemode[mkiv] \newsystemmode{mkiv} \setsystemmode{mkiv}

%D Setups:

\installcorenamespace{setup} % we can probably get rid of some :'s later on

\unexpanded\def\startsetups{} % to please dep checker
\unexpanded\def\stopsetups {} % to please dep checker

\expanded % will become obsolete
  {\def\expandafter\noexpand\csname\e!start\v!setups\endcsname
     {\begingroup\noexpand\doifnextoptionalelse
        {\noexpand\dostartsetupsA\expandafter\noexpand\csname\e!stop\v!setups\endcsname}
        {\noexpand\dostartsetupsB\expandafter\noexpand\csname\e!stop\v!setups\endcsname}}}

\letvalue{\e!stop\v!setups}\relax

\unexpanded\def\setups{\doifnextbgroupelse\system_setups_a\system_setups_b} % {..} or [..]
\unexpanded\def\setup {\doifnextbgroupelse\system_setups  \system_setups_c} % {..} or [..]

\def\system_setups_a  #1{\processcommacommand[#1]\system_setups} % {..}
\def\system_setups_b[#1]{\processcommacommand[#1]\system_setups} % [..]
\def\system_setups_c[#1]{\system_setups{#1}} % [..]

\letvalue{\??setup:\letterpercent}\gobbleoneargument

\def\system_setups#1% the grid option will be extended to other main modes
  {\csname\??setup
     \ifgridsnapping
       \ifcsname\??setup\v!grid:#1\endcsname\v!grid:#1\else\ifcsname\??setup:#1\endcsname:#1\else:\letterpercent\fi\fi
     \else
                                                           \ifcsname\??setup:#1\endcsname:#1\else:\letterpercent\fi
     \fi
   \endcsname\empty} % takes one argument

% We can consider:
%
% \setvalue{\??setup->\v!auto}#1{\ctxcommand{autosetup("#1")}}
%
% ":\letterpercent" => "->\v!auto" with "\endcsname{#1}"
%
% but it won't work out well with multiple setups (intercepted at the
% lua end) that then get only one argument.

% the next one is meant for \c!setups situations, hence the check for
% a shortcut

\def\doprocesslocalsetups#1%
  {\edef\tobeprocessedsetups{#1}%
   \ifx\tobeprocessedsetups\empty\else
     \dodoprocesslocalsetups
   \fi}

% \def\dodoprocesslocalsetups
%   {\expandafter\processcommalist\expandafter[\tobeprocessedsetups]\system_setups}

% setups=S1
% setups=lua(S2)
% setups=S3
% setups={S1,lua(S2),xml(test{123}),S3}

\def\dodoprocesslocalsetups
  {\ctxcommand{autosetups("\tobeprocessedsetups")}}

\def\autosetups#1%
  {\ctxcommand{autosetups("#1")}}

\edef\setupwithargument#1% saves a few expansions
  {\noexpand\csname\??setup:\noexpand\ifcsname\??setup:#1\endcsname#1\noexpand\else\letterpercent\noexpand\fi\endcsname}

\let\directsetup\system_setups
\let\texsetup   \system_setups % nicer than \directsetup and more en par with xmlsetup and luasetup

\def\doifsetupselse#1% to be done: grid
  {\ifcsname\??setup:#1\endcsname
     \expandafter\firstoftwoarguments
   \else
     \expandafter\secondoftwoarguments
   \fi}

% \startluasetups oeps
%     context("DONE")
%     a = 1
%     b = 1
% \stopluasetups
%
% \luasetup{oeps}
%
% \startsetups xxx
%     ziezo
% \stopsetups
%
% \directsetup{xxx}
%
% \startxmlsetups zzz
%     [[#1]]
% \stopxmlsetups
%
% \xmlsetup{123}{zzz}
%
% \startbuffer[what]
%     context("DONE")
% \stopbuffer
%
% \startbuffer
%     context("MORE")
% \stopbuffer
%
% \ctxluabuffer[what]
%
% \ctxluabuffer

\newtoks\t_system_setups_tex \appendtoks
    \catcode\endoflineasciicode \ignorecatcode
\to \t_system_setups_tex

\newtoks\t_system_setups_loc \appendtoks
    \catcode\endoflineasciicode \ignorecatcode
\to \t_system_setups_loc

\newtoks\t_system_setups_raw \appendtoks
    % nothing
\to \t_system_setups_raw

\newtoks\t_system_setups_xml \appendtoks
    \catcode\endoflineasciicode\ignorecatcode
    \catcode\barasciicode      \othercatcode
\to \t_system_setups_xml

\newtoks\t_system_setups_lua \appendtoks
    \obeylualines
    \obeyluatokens
\to \t_system_setups_lua

% Is doglobal still relevant? Maybe always global? Or never? Anyway, it will become obsolete.

\unexpanded\def\startluasetups  {\begingroup\doifnextoptionalelse\system_setups_start_lua_a\system_setups_start_lua_b}
\unexpanded\def\startxmlsetups  {\begingroup\doifnextoptionalelse\system_setups_start_xml_a\system_setups_start_xml_b}
\unexpanded\def\startrawsetups  {\begingroup\doifnextoptionalelse\system_setups_start_raw_a\system_setups_start_raw_b}
\unexpanded\def\startlocalsetups{\begingroup\doifnextoptionalelse\system_setups_start_loc_a\system_setups_start_loc_b}
\unexpanded\def\startsetups     {\begingroup\doifnextoptionalelse\system_setups_start_tex_a\system_setups_start_tex_b}

\let\stopluasetups              \relax
\let\stopxmlsetups              \relax
\let\stoprawsetups              \relax
\let\stoplocalsetups            \relax
\let\stopsetups                 \relax

\def\system_setups_start_lua_indeed#1#2#3\stopluasetups  {\endgroup\dodoglobal\expandafter\def\csname\??setup#1:#2\expandafter\endcsname\expandafter##\expandafter1\expandafter{#3}}
\def\system_setups_start_xml_indeed#1#2#3\stopxmlsetups  {\endgroup\dodoglobal\expandafter\def\csname\??setup#1:#2\expandafter\endcsname\expandafter##\expandafter1\expandafter{#3}}
\def\system_setups_start_raw_indeed#1#2#3\stoprawsetups  {\endgroup\dodoglobal\expandafter\def\csname\??setup#1:#2\expandafter\endcsname\expandafter##\expandafter1\expandafter{#3}}
\def\system_setups_start_loc_indeed#1#2#3\stoplocalsetups{\endgroup\dodoglobal\expandafter\def\csname\??setup#1:#2\expandafter\endcsname\expandafter##\expandafter1\expandafter{#3}}
\def\system_setups_start_tex_indeed#1#2#3\stopsetups     {\endgroup\dodoglobal\expandafter\def\csname\??setup#1:#2\expandafter\endcsname\expandafter##\expandafter1\expandafter{#3}}

\def\system_setups_start_lua{\ifsecondargument\expandafter\system_setups_start_lua_c\else\expandafter\system_setups_start_lua_d\fi}
\def\system_setups_start_xml{\ifsecondargument\expandafter\system_setups_start_xml_c\else\expandafter\system_setups_start_xml_d\fi}
\def\system_setups_start_raw{\ifsecondargument\expandafter\system_setups_start_raw_c\else\expandafter\system_setups_start_raw_d\fi}
\def\system_setups_start_loc{\ifsecondargument\expandafter\system_setups_start_loc_c\else\expandafter\system_setups_start_loc_d\fi}
\def\system_setups_start_tex{\ifsecondargument\expandafter\system_setups_start_tex_c\else\expandafter\system_setups_start_tex_d\fi}

\def\system_setups_start_lua_a{\the\t_system_setups_lua\dodoubleempty\system_setups_start_lua} % [ ] delimited
\def\system_setups_start_xml_a{\the\t_system_setups_xml\dodoubleempty\system_setups_start_xml} % [ ] delimited
\def\system_setups_start_raw_a{\the\t_system_setups_raw\dodoubleempty\system_setups_start_raw} % [ ] delimited
\def\system_setups_start_loc_a{\the\t_system_setups_loc\dodoubleempty\system_setups_start_loc} % [ ] delimited
\def\system_setups_start_tex_a{\the\t_system_setups_tex\dodoubleempty\system_setups_start_tex} % [ ] delimited

% empty preserves inner {} (is removed by the \expandafter{#3})

\def\system_setups_start_lua_b#1 {\the\t_system_setups_lua\system_setups_start_lua_indeed\empty{#1}\empty} % space delimited
\def\system_setups_start_xml_b#1 {\the\t_system_setups_xml\system_setups_start_xml_indeed\empty{#1}\empty} % space delimited
\def\system_setups_start_raw_b#1 {\the\t_system_setups_raw\system_setups_start_raw_indeed\empty{#1}\empty} % space delimited
\def\system_setups_start_loc_b#1 {\the\t_system_setups_loc\system_setups_start_loc_indeed\empty{#1}\empty} % space delimited
\def\system_setups_start_tex_b#1 {\the\t_system_setups_tex\system_setups_start_tex_indeed\empty{#1}\empty} % space delimited

\def\system_setups_start_lua_c[#1][#2]{\the\t_system_setups_lua\system_setups_start_lua_indeed{#1}{#2}\empty} % [..] [..]
\def\system_setups_start_xml_c[#1][#2]{\the\t_system_setups_xml\system_setups_start_xml_indeed{#1}{#2}\empty} % [..] [..]
\def\system_setups_start_raw_c[#1][#2]{\the\t_system_setups_raw\system_setups_start_raw_indeed{#1}{#2}\empty} % [..] [..]
\def\system_setups_start_loc_c[#1][#2]{\the\t_system_setups_loc\system_setups_start_loc_indeed{#1}{#2}\empty} % [..] [..]
\def\system_setups_start_tex_c[#1][#2]{\the\t_system_setups_tex\system_setups_start_tex_indeed{#1}{#2}\empty} % [..] [..]

\def\system_setups_start_lua_d[#1][#2]{\the\t_system_setups_lua\system_setups_start_lua_indeed\empty{#1}\empty} % [..]
\def\system_setups_start_xml_d[#1][#2]{\the\t_system_setups_xml\system_setups_start_xml_indeed\empty{#1}\empty} % [..]
\def\system_setups_start_raw_d[#1][#2]{\the\t_system_setups_raw\system_setups_start_raw_indeed\empty{#1}\empty} % [..]
\def\system_setups_start_loc_d[#1][#2]{\the\t_system_setups_loc\system_setups_start_loc_indeed\empty{#1}\empty} % [..]
\def\system_setups_start_tex_d[#1][#2]{\the\t_system_setups_tex\system_setups_start_tex_indeed\empty{#1}\empty} % [..]

\def\luasetup#1{\ctxlua{\system_setups{#1}}}

% % % %

\def\systemsetupsprefix{*}

\def\systemsetups#1{\system_setups{\systemsetupsprefix#1}}

\def\resetsetups[#1]% see x-fo for usage
  {\ifcsname\??setup\ifgridsnapping\v!grid\fi:#1\endcsname
     \dodoglobal\letbeundefined{\??setup\ifgridsnapping\v!grid\fi:#1}%
   \else
     \dodoglobal\letbeundefined{\??setup:#1}%
   \fi}

\def\showsetupsdefinition[#1]%
  {\showvalue{\??setup:#1}} % temp hack for debugging

%D \macros
%D   {setvariables,getvariable,getvariabledefault}
%D
%D \starttyping
%D \setvariables[xx][title=]
%D \setvariables[xx][title=test test]
%D \setvariables[xx][title=test $x=1$ test]   % fatal error reported
%D \setvariables[xx][title=test {$x=1$} test]
%D \setvariables[xx][title]                   % fatal error reported
%D \setvariables[xx][titletitel=e]
%D \stoptyping

\installcorenamespace{variables}

\unexpanded\def\setvariables {\dotripleargument\system_variables_set[\getrawparameters ]}
\unexpanded\def\setevariables{\dotripleargument\system_variables_set[\getraweparameters]}
\unexpanded\def\setgvariables{\dotripleargument\system_variables_set[\getrawgparameters]}
\unexpanded\def\setxvariables{\dotripleargument\system_variables_set[\getrawxparameters]}

\unexpanded\def\globalsetvariables % obsolete
  {\dotripleargument\system_variables_set[\globalgetrawparameters]}

\def\system_variables_set[#1][#2][#3]% tricky, test on s-pre-60
  {\errorisfataltrue
   \doifelse{#2}\currentvariableclass
     {#1[\??variables#2:][#3]}%
     {\pushmacro\currentvariableclass
      \def\currentvariableclass{#2}%
      \getvariable{#2}\s!reset
      #1[\??variables#2:][#3]%
      \getvariable{#2}\s!set
      \popmacro\currentvariableclass}%
   \errorisfatalfalse}

\unexpanded\def\setvariable #1#2#3{\expandafter\def \csname\??variables#1:#2\endcsname{#3}}
\unexpanded\def\setevariable#1#2#3{\expandafter\edef\csname\??variables#1:#2\endcsname{#3}}
\unexpanded\def\setgvariable#1#2#3{\expandafter\gdef\csname\??variables#1:#2\endcsname{#3}}
\unexpanded\def\setxvariable#1#2#3{\expandafter\xdef\csname\??variables#1:#2\endcsname{#3}}

\def\getvariable#1#2%
  {\csname
     \ifcsname\??variables#1:#2\endcsname\??variables#1:#2\else\s!empty\fi
   \endcsname}

\def\showvariable#1#2%
  {\showvalue{\ifcsname\??variables#1:#2\endcsname\??variables#1:#2\else\s!empty\fi}}

\let\currentvariableclass\empty

%D \macros
%D   {checkvariables}
%D
%D I'll probably forget that this on exists.

\let\m_system_variables_temp\empty

\def\checkvariables
  {\dodoubleargument\system_variables_check}

\def\system_variables_check
  {\dogetparameters\system_variables_check_value}

\def\system_variables_check_value#1#2#3%
  {\ifcsname\??variables#1:#2\endcsname
     \edef\m_system_variables_temp{\csname\??variables#1:#2\endcsname}%
     \ifx\m_system_variables_temp\empty
       \expandafter\def\csname\??variables#1:#2\endcsname{#3}%
     \fi
   \else
     \expandafter\def\csname\??variables#1:#2\endcsname{#3}%
   \fi}

%D \macros
%D   {doifelsevariable,doifvariable,doifnotvariable}
%D
%D A few trivial macros:

\unexpanded\def\doifelsevariable#1#2%
  {\ifcsname\??variables#1:#2\endcsname
     \expandafter\firstoftwoarguments
   \else
     \expandafter\secondoftwoarguments
   \fi}

\unexpanded\def\doifvariable#1#2%
  {\ifcsname\??variables#1:#2\endcsname
     \expandafter\firstofoneargument
   \else
     \expandafter\gobbleoneargument
   \fi}

\unexpanded\def\doifnotvariable#1#2%
  {\ifcsname\??variables#1:#2\endcsname
     \expandafter\gobbleoneargument
   \else
     \expandafter\firstofoneargument
   \fi}

\def\getvariabledefault#1#2% #3% can be command, so no ifcsname here
  {\executeifdefined{\??variables#1:#2}}% {#3}

\unexpanded\def\setupenv
  {\dotripleargument\system_variables_set[\getrawparameters][\s!environment]}

\unexpanded\def\doifenvelse{\doifelsevariable  \s!environment}
\unexpanded\def\doifenv    {\doifvariable      \s!environment}
\unexpanded\def\doifnotenv {\doifnotvariable   \s!environment}
\def\env                   {\getvariable       \s!environment}
\def\envvar                {\getvariabledefault\s!environment}

\protect \endinput
