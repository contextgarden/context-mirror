%D \module
%D   [       file=file-mod, % was core-fil,
%D        version=20110701, % 1997.11.15,
%D          title=\CONTEXT\ File Macros,
%D       subtitle=Module Support,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt File Macros / Modules}

\unprotect

\registerctxluafile{file-mod}{1.001}

%D \macros
%D   {usemodule}
%D
%D Most of \CONTEXT is preloaded in the format file. Some very
%D domain specific typesetting topics are however dealt with in
%D separate modules, e.g. typesetting of chemical structure
%D formulas. These modules are loaded by:
%D
%D \showsetup{usemodule}
%D
%D More information on the specific modules can be found in
%D their dedicated manuals. We use \type {\next} so that we
%D can \type {\end} in modules.

\def\dodousemodules#category#name%
  {\ctxcommand{usemodules("#category","#name","\truefilename{#name}")}}

\def\usemodules
  {\dotripleempty\dousemodules}

\let\usemodule\usemodules

\def\dousemodules[#category][#name][#parameters]%
  {\pushmacro\currentmodule
   \pushmacro\currentmoduleparameters
   \let\currentmoduleparameters\empty
   \ifthirdargument
     \doifelsenothing{#name}
       {\let\next\relax}
       {\def\currentmoduleparameters{#parameters}%
        \def\next{\processcommalist[#name]{\dodousemodules{#category}}}}%
   \else\ifsecondargument
     \doifelsenothing{#name}
       {\let\next\relax}
       {\doifassignmentelse{#name}
          {\def\currentmoduleparameters{#name}%
           \def\next{\processcommalist[#category]{\dodousemodules{}}}}
          {\def\next{\processcommalist[#name]{\dodousemodules{#category}}}}}%
   \else
     \def\next{\processcommalist[#category]{\dodousemodules{}}}%
   \fi\fi
   \next
   \popmacro\currentmoduleparameters
   \popmacro\currentmodule}

\let\currentmoduleparameters\empty
\let\currentmodule          \s!unknown

\unexpanded\def\startmodule
  {\doifnextoptionalelse\dostartmodule\nostartmodule}

\def\nostartmodule #name %
  {\dostartmodule[#name]}

\def\dostartmodule[#name]%
  {\pushmacro\currentmodule
   \pushmacro\currentmoduleparameters
   \def\currentmodule{#name}}

\unexpanded\def\stopmodule
  {\popmacro\currentmoduleparameters
   \popmacro\currentmodule}

\unexpanded\def\setupmodule
  {\dodoubleempty\dosetupmodule}

\def\dosetupmodule[#name][#parameters]%
  {\scratchtoks\expandafter{\currentmoduleparameters}%
   \ifsecondargument
     \getparameters[\??md:#name:][#parameters]%
     \expanded{\getparameters[\??md:#name:][\the\scratchtoks]}%
   \else
     \getparameters[\??md:\currentmodule:][#name]%
     \expanded{\getparameters[\??md:\currentmodule:][\the\scratchtoks]}%
   \fi
   \let\currentmoduleparameters\empty}

\def\moduleparameter    #name#parameter{\executeifdefined{\??md:#name:#parameter}{}}
\def\currentmoduleparameter  #parameter{\executeifdefined{\??md:\currentmodule:#parameter}{}}

\def\useluamodule  [#name]{\ctxlua{dofile(resolvers.findctxfile("#name"))}}
\def\luaenvironment #name {\ctxlua{dofile(resolvers.findctxfile("#name"))}}

% \usemodule[newmml]
% \usemodule[newmml][a=b]
% \usemodule[x][newmml]
% \usemodule[x][newmml][a=b]
%
% \startmodule [mathml]
%   \setupmodule[a=c] \relax [\currentmoduleparameter{a}] % user vars will be set afterwards
%   \setupmodule[a=c] \relax [\currentmoduleparameter{a}] % user vars are now forgotten
% \stopmodule

% one can introduce test sections with:
%
% \enablemode[newmml:test:\currentmoduleparameter{test}]
% \startmode[newmml:test:yes} ... \stopmode
%
% these will be ignored unless test=yes
%
% however, a better way is:

\let\stopmoduletestsection\donothing

\unexpanded\def\startmoduletestsection
  {\bgroup
   \setupmodule % we need to make sure that the vars are set
   \doifelse{\currentmoduleparameter\v!test}\v!yes
     {\egroup
      \writestatus{\currentmodule}{loading experimental code}}
     {\egroup
      \writestatus{\currentmodule}{skipping experimental code}%
      \gobbleuntil\stopmoduletestsection}}

% will become file-run

%D To save memory, we implement some seldomly used commands
%D in a lazy way. Nota bene: such runtime definitions are
%D global.
%D
%D \starttyping
%D \fetchruntimecommand\showaccents{\f!colorprefix ...}
%D \stoptyping

\def\fetchruntimecommand#1#2%
  {\def#1{\dofetchruntimecommand#1{#2}}}

\def\dofetchruntimecommand#1#2%
  {\doifnotflagged{#2}
     {\let#1\undefined
      \startreadingfile
      \startnointerference % \bgroup
      \cleanupfeatures % better \setnormalcatcodes / test first
      \readfile{#2.\mksuffix}\donothing\donothing
      \stopnointerference  % \egroup
      \stopreadingfile
      \doglobal\setflag{#2}}%
   \ifx#1\undefined
     \writestatus\m!system{command \string#1 not found in file #2}%
     \gdef#1{{\infofont[unknown command \string#1]}}%
   \fi
   #1}

%D \macros
%D   {doifolderversionelse}
%D
%D We start with a macro specially for Aditya who wants to be able
%D to use development versions of \MKIV\ for real documents.
%D
%D \starttyping
%D \doifolderversionelse\contextversion{1010.10.10} {OLDER} {OKAY} => OLDER
%D \doifolderversionelse\contextversion{2020.20.20} {OLDER} {OKAY} => OKAY
%D \doifolderversionelse\contextversion{2020}       {OLDER} {OKAY} => OKAY
%D \stoptyping
%D
%D The version pattern is \type {yyyy.mm.dd} (with mm and dd being optional).

\def\doifolderversionelse#parent#child{\ctxcommand{doifolderversionelse("#parent","#child")}}
\def\doifoldercontextelse       #child{\ctxcommand{doifolderversionelse("#child")}}

%D Experimental:

\let\checkpreprocessor\relax

%D To be documented and probably moved

\def\documentresources{\@@erurl}

\unexpanded\def\setupexternalresources
  {\dodoubleargument\getparameters[\??er]}

\setupexternalresources
  [url=]

\protect \endinput
