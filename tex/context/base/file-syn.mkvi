%D \module
%D   [       file=file-syn, % was core-fil,
%D        version=20110701, % 1997.11.15,
%D          title=\CONTEXT\ File Macros,
%D       subtitle=Module Support,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt File Macros / Synonyms}

\unprotect

\registerctxluafile{file-syn}{1.001}

%D \macros
%D   {definefilesynonym,definefilefallback}
%D
%D One of the problems with loading files is that their names
%D can depend on the interface language. We therefore need a
%D method to define filesynonyms. The actual synonyms are
%D defined elsewhere, but look like:
%D
%D \starttyping
%D \definefilesynonym [chemic]  [chemie]
%D \definefilesynonym [einheit] [unit]
%D \definefilesynonym [unit]    [unit]
%D \stoptyping
%D
%D So we can say in english:
%D
%D \starttyping
%D \usemodules[pictex,chemic,unit]
%D \stoptyping
%D
%D and in dutch:
%D
%D \starttyping
%D \usemodules[pictex,chemie,unit]
%D \stoptyping

\unexpanded\def\definefilesynonym {\dodoubleempty   \syst_files_define_synonym }
\unexpanded\def\definefilefallback{\dodoubleargument\syst_files_define_fallback} % still used?

\def\syst_files_define_synonym     [#name][#realname]{\clf_definefilesynonym {#name}{#realname}}
\def\syst_files_define_fallback[#name][#alternatives]{\clf_definefilefallback{#name}{#alternatives}}

%D \macros
%D   {truefilename}
%D
%D At the system level such a filename can be called upon by
%D saying:
%D
%D \starttyping
%D \truefilename{filename/filesynonym}
%D \stoptyping
%D
%D The implementation shows that nesting is supported.

\def\truefilename#1{\clf_truefilename{#1}}

\protect \endinput
