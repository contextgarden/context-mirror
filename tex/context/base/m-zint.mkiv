%D \module
%D   [       file=m-zint,
%D        version=2010.12.07,
%D          title=\CONTEXT\ Extra Modules,
%D       subtitle=Zint Barcode Generator,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

%D Using \type {zint} seems to be the easiest way to generate
%D (PDF417) barcodes so therefore we now have this module. There
%D are proper (also windows) binaries at:
%D
%D \starttyping
%D http://www.zint.org.uk
%D \stoptyping
%D
%D There is a bit more code than needed as we want to be able to
%D feed names.

\startluacode

moduledata.zint = { }

local format, lower, gsub  = string.format, string.lower, string.gsub
local patterns = lpeg.patterns

local zint        = "zint" -- '"c:/program files/zint/zint.exe"'
local defaultcode = "PDF417"

local whitespace  = patterns.whitespace
local spaces      = whitespace^0
local key         = (spaces / "") * patterns.digit^0 * (patterns.colon * spaces / "")
local value       = (whitespace / "" + (1 - key))^1
local pattern     = lpeg.Cf(lpeg.Ct("") * (lpeg.Cg((lpeg.Cs(key) / tonumber) * (lpeg.Cs(value) / lower)) + patterns.anything)^0,rawset)

local reverse

local function cleancode(code)
    if not code or code == "" then
        code = defaultcode
    end
    return lower(gsub(code," ",""))
end

local function numberofcode(code)
    if not reverse then
        local types = os.resultof(format("%s --types",zint)) or ""
        local formats = lpeg.match(pattern,types)
        if not formats or not next(formats) then
            return code
        end
        reverse = table.swapped(formats) or { }
    end
    code = cleancode(code)
    return reverse[code] or code
end

function moduledata.zint.generate(code,data,suffix,options)
    if not data or data == "" then
        data = "unset"
    end
    local code = cleancode(code)
    local base = format("zint-%s-%s",code,md5.hex(data))
    local name = file.addsuffix(base,suffix or "eps")
    if not lfs.isfile(name) then
        local temp = file.addsuffix(base,"tmp")
        local code = numberofcode(code)
        logs.simple("using 'zint' to generate '%s'",base)
        io.savedata(temp,data)
        os.execute(format('%s --barcode=%s --output="%s" --input="%s" %s',zint,code,name,temp,options or ""))
        os.remove(temp)
    end
    return name
end

\stopluacode

\unprotect

\unexpanded\def\barcode[#1]% [alternative=,text=]
  {\bgroup
   \getdummyparameters
     [\c!alternative=,\c!text=,#1]%
   \externalfigure
     [\cldcontext{moduledata.zint.generate("\dummyparameter\c!alternative",\!!bs\dummyparameter\c!text\!!es)}]%
     [#1,\c!alternative=,\c!text=]%
   \egroup}

\protect

\continueifinputfile{m-zint.mkiv}

\starttext

    \externalfigure[\cldcontext{moduledata.zint.generate("PDF417",[[Hans Hagen]])}]
    \blank
    \externalfigure[\cldcontext{moduledata.zint.generate("PDF417","Ton Otten")}]
    \blank
    \externalfigure[\cldcontext{moduledata.zint.generate("ISBN","9789490688011")}]
    \blank
    \barcode[text=Does It Work?,width=\textwidth]
    \blank
    \barcode[alternative=isbn,text=9789490688011,width=3cm]

\stoptext


