if not modules then modules = { } end modules ['trac-inf'] = {
    version   = 1.001,
    comment   = "companion to trac-inf.mkiv",
    author    = "Hans Hagen, PRAGMA-ADE, Hasselt NL",
    copyright = "PRAGMA ADE / ConTeXt Development Team",
    license   = "see context related readme files"
}

-- As we want to protect the global tables, we no longer store the timing
-- in the tables themselves but in a hidden timers table so that we don't
-- get warnings about assignments. This is more efficient than using rawset
-- and rawget.

local type, tonumber, select = type, tonumber, select
local format, lower, find = string.format, string.lower, string.find
local concat = table.concat
local clock  = os.gettimeofday or os.clock -- should go in environment

local setmetatableindex = table.setmetatableindex
local serialize         = table.serialize
local formatters        = string.formatters

statistics              = statistics or { }
local statistics        = statistics

statistics.enable       = true
statistics.threshold    = 0.01

local statusinfo, n, registered, timers = { }, 0, { }, { }

setmetatableindex(timers,function(t,k)
    local v = { timing = 0, loadtime = 0, offset = 0 }
    t[k] = v
    return v
end)

local function hastiming(instance)
    return instance and timers[instance]
end

local function resettiming(instance)
    timers[instance or "notimer"] = { timing = 0, loadtime = 0, offset = 0 }
end

local ticks   = clock
local seconds = function(n) return n or 0 end

ticks   = lua.getpreciseticks
seconds = lua.getpreciseseconds

local function starttiming(instance,reset)
    local timer = timers[instance or "notimer"]
    local it = timer.timing
    if reset then
        it = 0
        timer.loadtime = 0
    end
    if it == 0 then
        timer.starttime = ticks()
        if not timer.loadtime then
            timer.loadtime = 0
        end
    end
    timer.timing = it + 1
end

local function stoptiming(instance)
    local timer = timers[instance or "notimer"]
    local it = timer.timing
    if it > 1 then
        timer.timing = it - 1
    else
        local starttime = timer.starttime
        if starttime and starttime > 0 then
            local stoptime  = ticks()
            local loadtime  = stoptime - starttime
            timer.stoptime  = stoptime
            timer.loadtime  = timer.loadtime + loadtime
            timer.timing    = 0
            timer.starttime = 0
            return loadtime
        end
    end
    return 0
end

local function benchmarktimer(instance)
    local timer = timers[instance or "notimer"]
    local it = timer.timing
    if it > 1 then
        timer.timing = it - 1
    else
        local starttime = timer.starttime
        if starttime and starttime > 0 then
            timer.offset = ticks() - starttime
        else
            timer.offset = 0
        end
    end
end

local function elapsed(instance)
    if type(instance) == "number" then
        return instance
    else
        local timer = timers[instance or "notimer"]
        return timer and seconds(timer.loadtime - 2*(timer.offset or 0)) or 0
    end
end

local function currenttime(instance)
    if type(instance) == "number" then
        return instance
    else
        local timer = timers[instance or "notimer"]
        local it = timer.timing
        if it > 1 then
            -- whatever
        else
            local starttime = timer.starttime
            if starttime and starttime > 0 then
                return seconds(timer.loadtime + ticks() - starttime -  2*(timer.offset or 0))
            end
        end
        return 0
    end
end

local function elapsedtime(instance)
    return format("%0.3f",elapsed(instance))
end

local function elapsedindeed(instance)
    return elapsed(instance) > statistics.threshold
end

local function elapsedseconds(instance,rest) -- returns nil if 0 seconds
    if elapsedindeed(instance) then
        return format("%0.3f seconds %s", elapsed(instance),rest or "")
    end
end

statistics.hastiming      = hastiming
statistics.resettiming    = resettiming
statistics.starttiming    = starttiming
statistics.stoptiming     = stoptiming
statistics.currenttime    = currenttime
statistics.elapsed        = elapsed
statistics.elapsedtime    = elapsedtime
statistics.elapsedindeed  = elapsedindeed
statistics.elapsedseconds = elapsedseconds
statistics.benchmarktimer = benchmarktimer

-- general function .. we might split this module

function statistics.register(tag,fnc)
    if statistics.enable and type(fnc) == "function" then
        -- second load can overload:
        local rt = registered[tag] or (#statusinfo + 1)
        statusinfo[rt] = { tag, fnc }
        registered[tag] = rt
        if #tag > n then n = #tag end
    end
end

local report = logs.reporter("mkiv lua stats")

function statistics.show()
    if statistics.enable then
        -- this code will move
        local register = statistics.register
        register("used platform", function()
            return format("%s, type: %s, binary subtree: %s",
                os.platform or "unknown",os.type or "unknown", environment.texos or "unknown")
        end)
        register("used engine", function()
            return format("%s version: %s, functionality level: %s, format id: %s, compiler: %s",
                LUATEXENGINE, LUATEXVERSION, LUATEXFUNCTIONALITY, LUATEXFORMATID, status.used_compiler)
        end)
        register("used hash slots", function()
            local t = status.gethashstate()
            local m = status.gettexstate()
            return format("%s of %s with base %s, approximate memory usage: %i MB",
                t.cnt, t.max, status.tex_hash_size, m.approximate // (1024 * 1024))
        end)
        register("callbacks", statistics.callbacks)
        -- so far
        register("lua properties",function()
            local hash = lua.gethashchars()
            local mask = load([[τεχ = 1]]) and "utf" or "ascii"
            return format("engine: %s %s, used memory: %s, hash chars: min(%i,40), symbol mask: %s (%s)",
                "lua", LUAVERSION, statistics.memused(), hash, mask, mask == "utf" and "τεχ" or "tex")
        end)
        register("runtime",statistics.runtime)
        logs.newline() -- initial newline
        for i=1,#statusinfo do
            local s = statusinfo[i]
            local r = s[2]()
            if r then
                report("%s: %s",s[1],r)
            end
        end
     -- logs.newline() -- final newline
        statistics.enable = false
    end
end

function statistics.memused() -- no math.round yet -)
    local round    = math.round or math.floor
    local luastate = status.getluastate()
    return format("%s MB, ctx: %s MB, max: %s MB",
        round(collectgarbage("count")/1000),
        round(luastate.state_bytes/1000000),
        luastate.state_bytes_max and round(luastate.state_bytes_max/1000000) or "unknown"
    )
end

starttiming(statistics)

function statistics.formatruntime(runtime) -- indirect so it can be overloaded and
    return format("%s seconds", runtime)   -- indeed that happens in cure-uti.lua
end

function statistics.runtime()
    stoptiming(statistics)
 -- stoptiming(statistics) -- somehow we can start the timer twice, but where
    local runtime = lua.getruntime and lua.getruntime() or elapsedtime(statistics)
    return statistics.formatruntime(runtime)
end

local report = logs.reporter("system")

function statistics.timed(action,all)
    starttiming("run")
    action()
    stoptiming("run")
    local runtime = tonumber(elapsedtime("run"))
    if all then
        local alltime = tonumber(lua.getruntime and lua.getruntime() or elapsedtime(statistics))
        if alltime and alltime > 0 then
            report("total runtime: %0.3f seconds of %0.3f seconds",runtime,alltime)
            return
        end
    end
    report("total runtime: %0.3f seconds",runtime)
end

-- goodie

function statistics.tracefunction(base,tag,...)
    for i=1,select("#",...) do
        local name = select(i,...)
        local stat = { }
        local func = base[name]
        setmetatableindex(stat,function(t,k) t[k] = 0 return 0 end)
        base[name] = function(n,k,v) stat[k] = stat[k] + 1 return func(n,k,v) end
        statistics.register(formatters["%s.%s"](tag,name),function() return serialize(stat,"calls") end)
    end
end

-- now here

status.iocodes = status.iocodes or { [0] =
    "terminal input",
    "lua input",
    "scan token input",
    "scan token eof input",
    "tex macro",
    "file input",
}

local report = logs.reporter("usage")

function statistics.showusage(when)
    local s = status.list()
    local c = status.getcallbackstate() -- status.callbacks
    local m = mplib.getcallbackstate()
    local b = backends.getcallbackstate()
    --
    local pool      = s.poolstate
    local hash      = s.hashstate
    local node      = s.nodestate
    local token     = s.tokenstate
    local buffer    = s.bufferstate
    local input     = s.inputstate
    local file      = s.filestate
    local nest      = s.neststate
    local parameter = s.parameterstate
    local save      = s.savestate
    local expand    = s.expandstate
    local tstatus   = s.texstate
    local lstatus   = s.luastate
    --
    report("")
    if when == "finish" then
        report("status after finishing run")
    else
        report("status after shipping out page %s",tex.getcount("realpageno"))
    end
    report("")
    report("  current file name   : %s", s.filename or "")
    report("  current input type  : %s", status.iocodes[s.iocode] or 'unknown')
    report("  current line number : %s", s.linenumber)
    report("")
    report("  string memory       : min: %s, max: %s, set: %s, mem: %s, top: %s, use: %s, cnt: %s", pool     .min, pool     .max, pool     .set, pool     .mem, pool     .top, pool .use, pool.cnt)
    report("  hash memory         : min: %s, max: %s, set: %s, mem: %s, top: %s, use: %s, cnt: %s", hash     .min, hash     .max, hash     .set, hash     .mem, hash     .top, hash .use, hash.cnt)
    report("  node memory         : min: %s, max: %s, set: %s, mem: %s, top: %s, use: %s, cnt: %s", node     .min, node     .max, node     .set, node     .mem, node     .top, node .use, node.cnt)
    report("  token memory        : min: %s, max: %s, set: %s, mem: %s, top: %s, use: %s",          token    .min, token    .max, token    .set, token    .mem, token    .top, token.use)
    report("  buffer size         : min: %s, max: %s, set: %s, mem: %s, top: %s",                   buffer   .min, buffer   .max, buffer   .set, buffer   .mem, buffer   .top)
    report("  input stack         : min: %s, max: %s, set: %s, mem: %s, top: %s",                   input    .min, input    .max, input    .set, input    .mem, input    .top)
    report("  input files         : min: %s, max: %s, set: %s, mem: %s, top: %s",                   file     .min, file     .max, file     .set, file     .mem, file     .top)
    report("  nest stack          : min: %s, max: %s, set: %s, mem: %s, top: %s",                   nest     .min, nest     .max, nest     .set, nest     .mem, nest     .top)
    report("  parameter stack     : min: %s, max: %s, set: %s, mem: %s, top: %s",                   parameter.min, parameter.max, parameter.set, parameter.mem, parameter.top)
    report("  save stack          : min: %s, max: %s, set: %s, mem: %s, top: %s",                   save     .min, save     .max, save     .set, save     .mem, save     .top)
    report("")
    report("  approximate memory  : %s", tstatus.approximate)
    report("")
    report("  expansion depth     : min: %s, max: %s, set: %s, top: %s", expand.min, expand.max, expand.set, expand.top)
    report("")
    report("  luabytecode bytes   : %s in %s registers", lstatus.bytecode_bytes, lstatus.bytecodes)
    report("  luastate bytes      : %s of %s", lstatus.state_bytes, lstatus.state_bytes_max or "unknown")
    report("")
    report("  file callbacks      : %s", c.file)
    report("  saved callbacks     : %s", c.saved)
    report("  direct callbacks    : %s", c.direct)
    report("  function callbacks  : %s", c["function"])
    report("  value callbacks     : %s", c.value)
    report("  message callbacks   : %s", c.message)
    report("  bytecode callbacks  : %s", c.bytecode)
    report("")
    report("  total callbacks     : %s", c.count)
    report("  backend callbacks   : %s", b.count)
    report("")
    report("  mp file callbacks   : %s", m.file)
    report("  mp text callbacks   : %s", m.text)
    report("  mp script callbacks : %s", m.script)
    report("  mp log callbacks    : %s", m.log)
    report("")
    report("  mp total callbacks  : %s", m.count)
    report("")
end

local registered = false
local enabled    = false

directives.register("system.usage", function(v)
    if v and not registered then
        luatex.registerpageactions(function() if enabled then statistics.showusage("page")   end end)
        luatex.registerstopactions(function() if enabled then statistics.showusage("finish") end end)
        registered = true
    end
    enabled = v
end)
