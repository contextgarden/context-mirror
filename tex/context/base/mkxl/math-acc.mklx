%D \module
%D   [       file=math-acc,
%D        version=2013.07.31,
%D          title=\CONTEXT\ Math Macros,
%D       subtitle=Accents,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt Math Macros / Accents}

% There are probably errors ... too distracted by amazing (piano) music videos running
% on top of scite ... so: experimental code.

\unprotect

%D This module permits overloading of accents so that we can do fancy things. The
%D implementation is similar to stackers. By default accenst are defined in a simple
%D way. Contrary to extensibles accents cannot grow indefinitely. Alas the
%D implementation of accents is different too, in the sense that they are
%D prepositioned i.e. are already raised. (In my opinion for no real reason as they
%D need to adapt anyway).
%D
%D In \MKIV\ we used virtual characters in the "FE* range but in \LMTX\ we do it a bit
%D different as we have a more powerful virtual subsystem. For details on the older
%D but neat approach see the lua and mkiv files.
%D
%D Older implementations are kept in the \MKII\ and \MKIV\ modules for educational
%D purposes.

\installcorenamespace{mathaccents}

\installcommandhandler \??mathaccents {mathaccent} \??mathaccents

\aliased\let\setupmathaccents\setupmathaccent

\setupmathaccents
  [\c!top=,
   \c!bottom=,
   \c!mathstyle=,
   \c!color=,
   \c!stretch=\v!no,
   \c!define=\v!yes] % not used

\definemathaccent
  [\v!both]

\definemathaccent
  [\v!top]
  [\v!both]

\definemathaccent
  [\v!bottom]
  [\v!both]

\permanent\tolerant\protected\def\definemathtopaccent[#1]#*[#2]#*[#3]% class name top
  {\ifparameter#3\or
     \frozen\protected\instance\edefcsname#2\endcsname{\math_accent_make_double                        {#1}\plusone{\number#3}\zerocount}%
   \else
     \frozen\protected\instance\edefcsname#1\endcsname{\math_accent_make_double\noexpand\currentmathaccent\plusone{\number#2}\zerocount}%
   \fi}

\permanent\tolerant\protected\def\definemathbottomaccent[#1]#*[#2]#*[#3]% class name bottom
  {\ifparameter#3\or
     \frozen\protected\instance\edefcsname#2\endcsname{\math_accent_make_double                        {#1}\plustwo\zerocount{\number#3}}%
   \else
     \frozen\protected\instance\edefcsname#1\endcsname{\math_accent_make_double\noexpand\currentmathaccent\plustwo\zerocount{\number#2}}%
   \fi}

\permanent\tolerant\protected\def\definemathdoubleaccent[#1]#*[#2]#*[#3]#*[#4]% class name top bottom
  {\ifparameter#4\or
     \frozen\protected\instance\edefcsname#2\endcsname{\math_accent_make_double                        {#1}\plusthree{\number#3}{\number#4}}%
   \else
     \frozen\protected\instance\edefcsname#1\endcsname{\math_accent_make_double\noexpand\currentmathaccent\plusthree{\number#2}{\number#3}}%
   \fi}

\installlocalcurrenthandler \??mathaccents {mathaccent}

\tolerant\protected\def\math_accent_make_double#class#kind#top#bottom#*[#settings]#:#content%
  {\beginmathgroup
   \setlocalmathaccentcurrent{#class}% \edef\currentmathaccent{#class}%
   \startusemathstyleparameter\mathaccentparameter\c!mathstyle
   \setupcurrentmathaccent[#settings]%
   \edef\m_fixed{\ifcstok{\mathaccentparameter\c!stretch}\v!yes\else\s!fixed\fi}%
   \Umathaccent
     \usedcolorparameterattributes{\mathaccentparameter\c!color}%
   % nooverflow % there is never na overflow anyway but we do accept thekey
   \ifcase#kind\or
     top \m_fixed
     \fam\zerocount#top
   \or
     bottom \m_fixed
     \fam\zerocount#bottom
   \or
     both \m_fixed
     \fam\zerocount#top
     \fam\zerocount#bottom
   \fi
   {\ifconditional\c_math_accent_auto_dotless\mathdotless\fi#content}%
   \stopusemathstyleparameter
   \endmathgroup}

%D Relative new:

\newconditional\c_math_accent_auto_dotless \settrue\c_math_accent_auto_dotless % cf opentype math

% \aliased\let\normalgrave\grave
% \aliased\let\normalddot \ddot
% \aliased\let\normalbar  \bar
% \aliased\let\normalacute\acute
% \aliased\let\normalhat  \hat     \aliased\let\normalwidehat  \widehat
% \aliased\let\normalcheck\check
% \aliased\let\normalbreve\breve
% \aliased\let\normaldot  \dot
% \aliased\let\normalring \ring
% \aliased\let\normaltilde\tilde
% \aliased\let\normaldddot\dddot

\pushoverloadmode

% These retain the given unicode values ... but can stretch when configured
% to do so: \setupmathaccent[\v!top][\c!stretch=\v!yes]

\definemathtopaccent[\v!top][grave]["0060] % these are old school
\definemathtopaccent[\v!top][ddot] ["00A8]
\definemathtopaccent[\v!top][bar]  ["00AF]
\definemathtopaccent[\v!top][acute]["00B4]
\definemathtopaccent[\v!top][hat]  ["02C6]
\definemathtopaccent[\v!top][check]["02C7]
\definemathtopaccent[\v!top][breve]["02D8]
\definemathtopaccent[\v!top][dot]  ["02D9]
\definemathtopaccent[\v!top][ring] ["02DA]
\definemathtopaccent[\v!top][tilde]["02DC]
\definemathtopaccent[\v!top][dddot]["20DB]

\definemathaccent
  [\v!top:\v!stretch]
  [\v!top]
  [\c!stretch=\v!yes]

%D We have a problem. We can use stackers but then we need to adapt the dimensions
%D which is font dependent. So, for now we keep them as accents.

\definemathtopaccent[\v!top:\v!stretch][widegrave]["0300] % these are generic modern
\definemathtopaccent[\v!top:\v!stretch][wideddot] ["0308]
\definemathtopaccent[\v!top:\v!stretch][widebar]  ["0304]
\definemathtopaccent[\v!top:\v!stretch][wideacute]["0301]
\definemathtopaccent[\v!top:\v!stretch][widehat]  ["0302]
\definemathtopaccent[\v!top:\v!stretch][widecheck]["030C]
\definemathtopaccent[\v!top:\v!stretch][widebreve]["0306]
\definemathtopaccent[\v!top:\v!stretch][widedot]  ["0307]
\definemathtopaccent[\v!top:\v!stretch][widering] ["030A]
\definemathtopaccent[\v!top:\v!stretch][widetilde]["0303]
\definemathtopaccent[\v!top:\v!stretch][widedddot]["20DB]

\definemathtopaccent[\v!top:\v!stretch][vec]      ["20D7] % clumsy notation for vectors

\aliased\let\mathring\ring % for a while

\popoverloadmode

\protect \endinput
