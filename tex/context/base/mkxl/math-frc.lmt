if not modules then modules = { } end modules ['math-frc'] = {
    version   = 1.001,
    comment   = "companion to math-frc.mkiv",
    author    = "Hans Hagen, PRAGMA-ADE, Hasselt NL",
    copyright = "PRAGMA ADE / ConTeXt Development Team",
    license   = "see context related readme files"
}

-- obsolete
--
-- \def\math_frac_command_u
--   {\clf_umathfraction % we can get this bakc to the tex end
--      {\mathfractionparameter\c!rule}%
--      \ifempty\p_math_fraction_fences
--        \mathfractionparameter\c!left \space
--        \mathfractionparameter\c!right\space
--      \else
--        \math_frac_no_delim\space
--        \math_frac_no_delim\space
--      \fi
--      \dimexpr\mathfractionparameter\c!rulethickness\relax
--      {\number\namedboxanchor{\mathfractionparameter\c!source}}%
--    \relax}
--
-- local utfchar   = utf.char
--
-- local context   = context
-- local variables = interfaces.variables
--
-- local v_no      = variables.no
-- local v_yes     = variables.yes
-- local v_hidden  = variables.hidden
--
-- local resolved  = {
--     [0x007B] = "\\{",
--     [0x007D] = "\\}",
-- }
--
-- table.setmetatableindex(resolved, function(t,k)
--     local v = utfchar(k)
--     t[k] = v
--     return v
-- end)
--
-- local function umathfraction(how,left,right,width,source)
--     source = tonumber(source) or 0
--     if how == v_no then
--         if left == 0x002E and right == 0x002E then
--             context("\\Uatop source %i ",source)
--         else
--             context("\\Uatopwithdelims %s%s source %i ",resolved[left],resolved[right],source)
--         end
--     elseif how == v_yes or how == v_hidden then
--         local norule = how == v_hidden and "norule" or ""
--         if left == 0x002E and right == 0x002E then
--             context("\\Uabove source %i %s %ssp",source,norule,width)
--         else
--             context("\\Uabovewithdelims %s%s source %i %s %ssp",resolved[left],resolved[right],source,norule,width)
--         end
--     else -- v_auto
--         if left == 0x002E and right == 0x002E then
--             context("\\Uover source %i ",source)
--         else
--             context("\\Uoverwithdelims %s%s source %i ",resolved[left],resolved[right],source)
--         end
--     end
-- end
--
-- interfaces.implement {
--     name      = "umathfraction",
--     actions   = umathfraction,
--     protected = true,
--     arguments = { "string", "number", "number", "dimen", "string" }
-- }
