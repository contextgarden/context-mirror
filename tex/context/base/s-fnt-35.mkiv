%D \module
%D   [      file=s-fnt-35,
%D        version=2011.10.10,
%D          title=\CONTEXT\ Style File,
%D       subtitle=Feature List,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

% we already have a way to show character tables

\startluacode

-- the table will move to a font-* file

moduledata.fonts = moduledata.fonts or { }

local digits = {
    dflt = {
        dflt = "1234567890 1/2",
    },
}

local punctuation = {
    dflt = {
        dflt = ". , : ; ? !",
    },
}

local symbols = {
    dflt = {
        dflt = "@ # $ % & * () [] {} <> + - = / |",
    },
}

local uppercase = {
    latn = {
        dflt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    },
    grek = {
        dftl = "ΑΒΓΔΕΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ",
    },
    cyrl= {
        dflt = "АБВГДЕЖЗИІЙКЛМНОПРСТУФХЦЧШЩЪЫЬѢЭЮЯѲ"
    },
}

local lowercase = {
    latn = {
        dftl = "abcdefghijklmnopqrstuvwxyz",
    },
    grek = {
        dftl = "αβγδεηθικλμνξοπρστυφχψω",
    },
    cyrl= {
        dflt = "абвгдежзиійклмнопрстуфхцчшщъыьѣэюяѳ"
    },
}

local samples = {
    digits      = digits,
    punctuation = punctuation,
    symbols     = symbols,
    uppercase   = uppercase,
    lowercase   = lowercase,
}

fonts.tracers.samples = samples

table.setmetatableindex(uppercase,        function(t,k) return rawget(t,"latn") end)
table.setmetatableindex(lowercase,        function(t,k) return rawget(t,"latn") end)
table.setmetatableindex(digits,           function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(symbols,          function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(punctuation,      function(t,k) return rawget(t,"dflt") end)

table.setmetatableindex(uppercase.latn,   function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(uppercase.grek,   function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(uppercase.cyrl,   function(t,k) return rawget(t,"dflt") end)

table.setmetatableindex(lowercase.latn,   function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(lowercase.grek,   function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(lowercase.cyrl,   function(t,k) return rawget(t,"dflt") end)

table.setmetatableindex(digits.dflt,      function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(symbols.dflt,     function(t,k) return rawget(t,"dflt") end)
table.setmetatableindex(punctuation.dflt, function(t,k) return rawget(t,"dflt") end)

fonts.constructors.keys = {
    properties = {
        encodingbytes          = "number",
        embedding              = "number",
        cidinfo                = "table",
        format                 = "string",
        fontname               = "string",
        fullname               = "string",
        filename               = "filename",
        psname                 = "string",
        name                   = "string",
        virtualized            = "boolean",
        italic_correction      = "boolean",
        auto_italic_correction = "boolean",
        no_stackmath           = "boolean",
        noglyphnames           = "boolean",
        mode                   = "string",
        has_math               = "boolean",
        no_math_italics        = "boolean",
        no_text_italics        = "boolean",
        finalized              = "boolean",
    },
    parameters = {
        mathsize               = "scaledpoints",
        scriptpercentage       = "float",
        scriptscriptpercentage = "float",
        units                  = "cardinal",
        designsize             = "basepoints",
        expansion              = "table",
        protrusion             = "table",
        expand_factor          = "float",
        slant_factor           = "float",
        factor                 = "float",
        hfactor                = "float",
        vfactor                = "float",
        size                   = "scaledpoints",
        units                  = "scaledpoints",
        scaledpoints           = "scaledpoints",
        slant                  = "float",
        space                  = "scaledpoints",
        space_stretch          = "scaledpoints",
        space_shrink           = "scaledpoints",
        x_height               = "scaledpoints",
        quad                   = "scaledpoints",
        extra_space            = "scaledpoints",
        ascender               = "scaledpoints",
        descender              = "scaledpoints",
    },
}

--       parameters.expansion = {
--           stretch = tfmdata.stretch     or 0,
--           shrink  = tfmdata.shrink      or 0,
--           step    = tfmdata.step        or 0,
--           auto    = tfmdata.auto_expand or false,
--       }
--       parameters.protrusion = {
--           auto = auto_protrude
--       }

local function showtable(t,keys)
    if t then
        context.starttabulate { "|Tl|Tl|" }
        for k, v in table.sortedhash(keys) do
            context.NC()
            context(k)
            context.NC()
            local tk = t[k]
            if not tk then
                context("<unset>")
            elseif v == "filename" then
                context(file.basename(tk))
            elseif v == "boolean" then
                context(tostring(tk or false))
            elseif v == "scaledpoints" or v == "basepoints" then
                context(number.points(tk))
            elseif v == "table" then
                -- todo
                context("<table>")
            else
                context(tostring(tk))
            end
            context.NC()
            context.NR()
        end
        context.stoptabulate()
    end
end

function moduledata.fonts.show_properties()
    local tfmdata = fonts.hashes.identifiers[font.current()]
    showtable(tfmdata.properties,fonts.constructors.keys.properties)
end

function moduledata.fonts.show_parameters()
    local tfmdata = fonts.hashes.identifiers[font.current()]
    showtable(tfmdata.parameters,fonts.constructors.keys.parameters)
end

function moduledata.fonts.show_positional_features()
    local tfmdata = fonts.hashes.identifiers[font.current()]
    local resources = tfmdata.resources
    if resources then
        local features = resources.features
        if features then
            local gpos = features.gpos
            if gpos and next(gpos) then
                context.starttabulate { "|Tl|Tl|Tlp|" }
                for feature, scripts in table.sortedpairs(gpos) do
                    for script, languages in table.sortedpairs(scripts) do
                        context.NC()
                        context(feature)
                        context.NC()
                        context(script)
                        context.NC()
                        context(table.concat(table.sortedkeys(languages)," "))
                        context.NC()
                        context.NR()
                    end
                end
                context.stoptabulate()
            else
                context("no entries")
                context.par()
            end
        end
    end
end

local dynamics = true

function moduledata.fonts.show_substitution_features()
    local tfmdata = fonts.hashes.identifiers[font.current()]
    local resources = tfmdata.resources
    if resources then
        local features = resources.features
        if features then
            local gsub = features.gsub
            if gsub then
                local makes_sense = { }
                for feature, scripts in table.sortedpairs(gsub) do
                    for script, languages in table.sortedpairs(scripts) do
                        for language in table.sortedpairs(languages) do
                            local tag = string.format("dummy-%s-%s-%s",feature,script,language)
                            local fnt = string.format("file:%s*%s",file.basename(tfmdata.properties.filename),tag)
                            context.definefontfeature (
                                { tag },
                                {
                                    mode      = "node",
                                    script    = script,
                                    language  = language,
                                    [feature] = "yes"
                                }
                            )
                            if not dynamics then
                                context.definefont( { fnt }, { fnt } )
                            end
                            makes_sense[#makes_sense+1] = {
                                feature    = feature,
                                tag        = tag,
                                script     = script,
                                language   = language,
                                fontname   = fnt,
                            }
                        end
                    end
                end
                if #makes_sense > 0 then
                    context.starttabulate { "|Tl|Tl|Tl|p|" }
                    for i=1,#makes_sense do
                        local data     = makes_sense[i]
                        local script   = data.script
                        local language = data.language
                        context.NC()
                            context(data.feature)
                        context.NC()
                            context(script)
                        context.NC()
                            context(language)
                        context.NC()
                            if not dynamics then
                                context.startfont { data.fontname }
                            else
                                context.addff(data.tag)
                            end
                            context.verbatim(samples.lowercase  [script][language]) context.par()
                            context.verbatim(samples.uppercase  [script][language]) context.par()
                            context.verbatim(samples.digits     [script][language]) context.par()
                            context.verbatim(samples.punctuation[script][language])
                            context.verbatim(samples.symbols    [script][language])
                            if not dynamics then
                                context.stopfont()
                            end
                        context.NC()
                        context.NR()
                    end
                    context.stoptabulate()
                else
                    context("no entries")
                    context.par()
                end
            end
        end
    end
end

function moduledata.fonts.show_a_lot(title)

    if title == "" then title = false end

    if title then
        context.starttitle { title = title }
    end

    context.startsubject { title = "Properties" }
        moduledata.fonts.show_properties()
    context.stopsubject()

    context.startsubject { title = "Parameters" }
        moduledata.fonts.show_parameters()
    context.stopsubject()

    context.startsubject { title = "Positional features" }
        moduledata.fonts.show_positional_features()
    context.stopsubject()

    context.startsubject { title = "Substitution features" }
        moduledata.fonts.show_substitution_features()
    context.stopsubject()

    if title then
        context.stoptitle()
    end

end

\stopluacode

% todo: make a mtxrun --script --font <name> option

\continueifinputfile{s-fnt-35.mkiv}

\usemodule[art-01]

\setupbodyfont
  [cambria]

\starttext
    \ctxlua{moduledata.fonts.show_a_lot("Cambria")}
\stoptext
