%D \module
%D   [       file=typo-rep,
%D        version=2010.05.23,
%D          title=\CONTEXT\ Typesetting Macros,
%D       subtitle=Stripping,
%D         author=Hans Hagen,
%D           date=\currentdate,
%D      copyright=\PRAGMA]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\writestatus{loading}{ConTeXt Typesetting Macros / Stripping}

% experimental stripping

%D For a while we had stripping built into the analyzer. Khaled
%D suggested to generalize this so I changed the code into a
%D manipulator there.
%D
%D \starttyping
%D \definefontfeature[default][default][mode=node,formatters=strip]
%D \stoptyping
%D
%D However, in \MKIV\ it makes more sense to also provide it as a more
%D general feature. Here we implement this as experiment. I might
%D cook up a few more variants in both variants.
%D
%D \starttyping
%D \setcharacterstripping[1]
%D \stoptyping

\unprotect

\registerctxluafile{typo-rep}{1.001}

\definesystemattribute[stripping] \chardef\strippingattribute \dogetattributeid{stripping}

\def\setcharacterstripping
  {\ctxlua{nodes.stripping.enable()}%
   \gdef\setcharacterstripping[##1]{\attribute\strippingattribute##1\relax}%
   \setcharacterstripping}

\def\resetcharacterstripping
  {\attribute\strippingattribute\attributeunsetvalue}

% maybe .. this might disappear, but is handy for testing

\def\forcecharacterstripping % secret command
  {\ctxlua{fonts.otf.features.register("formatters",true)}}

\protect \endinput
